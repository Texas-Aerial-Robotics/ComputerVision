<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % version-entities SYSTEM "version.entities">
%version-entities;
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY hash "#">
]>
<refentry id="gstreamer-GstGError">
<refmeta>
<refentrytitle role="top_of_page" id="gstreamer-GstGError.top_of_page">GstGError</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GSTREAMER Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GstGError</refname>
<refpurpose>Categorized error messages</refpurpose>
</refnamediv>

<refsect1 id="gstreamer-GstGError.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-error-get-message">gst_error_get_message</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="gstreamer-GstGError.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GstCoreError">GstCoreError</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GstLibraryError">GstLibraryError</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GstResourceError">GstResourceError</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GstStreamError">GstStreamError</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-CORE-ERROR:CAPS">GST_CORE_ERROR</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-LIBRARY-ERROR:CAPS">GST_LIBRARY_ERROR</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-RESOURCE-ERROR:CAPS">GST_RESOURCE_ERROR</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-STREAM-ERROR:CAPS">GST_STREAM_ERROR</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-ERROR-SYSTEM:CAPS">GST_ERROR_SYSTEM</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>

<refsect1 id="gstreamer-GstGError.includes"><title>Includes</title><synopsis>#include &lt;gst/gst.h&gt;
</synopsis></refsect1>

<refsect1 id="gstreamer-GstGError.description" role="desc">
<title role="desc.title">Description</title>
<para>GStreamer elements can throw non-fatal warnings and fatal errors.
Higher-level elements and applications can programmatically filter
the ones they are interested in or can recover from,
and have a default handler handle the rest of them.</para>
<para>The rest of this section will use the term <quote>error</quote>
to mean both (non-fatal) warnings and (fatal) errors; they are treated
similarly.</para>
<para>Errors from elements are the combination of a <link linkend="GError"><type>GError</type></link> and a debug string.
The <link linkend="GError"><type>GError</type></link> contains:</para>
<itemizedlist>
<listitem><para>a domain type: CORE, LIBRARY, RESOURCE or STREAM</para></listitem>
<listitem><para>a code: an enum value specific to the domain</para></listitem>
<listitem><para>a translated, human-readable message</para></listitem>
<listitem><para>a non-translated additional debug string, which also contains</para></listitem>
<listitem>
<para>file and line information</para>
</listitem>
</itemizedlist>
<para>Elements do not have the context required to decide what to do with
errors.  As such, they should only inform about errors, and stop their
processing.  In short, an element doesn't know what it is being used for.</para>
<para>It is the application or compound element using the given element that
has more context about the use of the element. Errors can be received by
listening to the <link linkend="GstBus"><type>GstBus</type></link> of the element/pipeline for <link linkend="GstMessage"><type>GstMessage</type></link> objects with
the type <link linkend="GST-MESSAGE-ERROR:CAPS"><literal>GST_MESSAGE_ERROR</literal></link> or <link linkend="GST-MESSAGE-WARNING:CAPS"><literal>GST_MESSAGE_WARNING</literal></link>. The thrown errors should
be inspected, and filtered if appropriate.</para>
<para>An application is expected to, by default, present the user with a
dialog box (or an equivalent) showing the error message.  The dialog
should also allow a way to get at the additional debug information,
so the user can provide bug reporting information.</para>
<para>A compound element is expected to forward errors by default higher up
the hierarchy; this is done by default in the same way as for other types
of <link linkend="GstMessage"><type>GstMessage</type></link>.</para>
<para>When applications or compound elements trigger errors that they can
recover from, they can filter out these errors and take appropriate action.
For example, an application that gets an error from xvimagesink
that indicates all XVideo ports are taken, the application can attempt
to use another sink instead.</para>
<para>Elements throw errors using the <link linkend="GST-ELEMENT-ERROR:CAPS"><type>GST_ELEMENT_ERROR</type></link> convenience macro:</para>
<example>
<title>Throwing an error</title>
  <programlisting>
    GST_ELEMENT_ERROR (src, RESOURCE, NOT_FOUND,
      (_("No file name specified for reading.")), (NULL));
  </programlisting>
</example>
<para>Things to keep in mind:</para>
<itemizedlist>
  <listitem><para>Don't go off inventing new error codes.  The ones
    currently provided should be enough.  If you find your type of error
    does not fit the current codes, you should use FAILED.</para></listitem>
  <listitem><para>Don't provide a message if the default one suffices.
    this keeps messages more uniform.  Use (<link linkend="NULL:CAPS"><literal>NULL</literal></link>) - not forgetting the
    parentheses.</para></listitem>
  <listitem><para>If you do supply a custom message, it should be
    marked for translation.  The message should start with a capital
    and end with a period.  The message should describe the error in short,
    in a human-readable form, and without any complex technical terms.
    A user interface will present this message as the first thing a user
    sees.  Details, technical info, ... should go in the debug string.
  </para></listitem>
  <listitem><para>The debug string can be as you like.  Again, use (<link linkend="NULL:CAPS"><literal>NULL</literal></link>)
    if there's nothing to add - file and line number will still be
    passed.  <link linkend="GST-ERROR-SYSTEM:CAPS"><type>GST_ERROR_SYSTEM</type></link> can be used as a shortcut to give
    debug information on a system call error.</para></listitem>
</itemizedlist>

</refsect1>
<refsect1 id="gstreamer-GstGError.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="gst-error-get-message" role="function">
<title>gst_error_get_message&#160;()</title>
<indexterm zone="gst-error-get-message"><primary>gst_error_get_message</primary></indexterm>
<programlisting language="C"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
gst_error_get_message (<parameter><link linkend="GQuark"><type>GQuark</type></link> domain</parameter>,
                       <parameter><link linkend="gint"><type>gint</type></link> code</parameter>);</programlisting>
<para>Get a string describing the error message in the current locale.</para>
<refsect3 id="gst-error-get-message.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>domain</para></entry>
<entry role="parameter_description"><para>the GStreamer error domain this error belongs to.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>code</para></entry>
<entry role="parameter_description"><para>the error code belonging to the domain.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-error-get-message.returns" role="returns">
<title>Returns</title>
<para> a newly allocated string describing
the error message (in UTF-8 encoding). </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>

</refsect1>
<refsect1 id="gstreamer-GstGError.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GstCoreError" role="enum">
<title>enum GstCoreError</title>
<indexterm zone="GstCoreError"><primary>GstCoreError</primary></indexterm>
<para>Core errors are errors inside the core GStreamer library.</para>
<refsect3 id="GstCoreError.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-FAILED:CAPS">GST_CORE_ERROR_FAILED</para></entry>
<entry role="enum_member_description"><para>a general error which doesn't fit in any other
category.  Make sure you add a custom message to the error call.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-TOO-LAZY:CAPS">GST_CORE_ERROR_TOO_LAZY</para></entry>
<entry role="enum_member_description"><para>do not use this except as a placeholder for
deciding where to go while developing code.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-NOT-IMPLEMENTED:CAPS">GST_CORE_ERROR_NOT_IMPLEMENTED</para></entry>
<entry role="enum_member_description"><para>use this when you do not want to implement
this functionality yet.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-STATE-CHANGE:CAPS">GST_CORE_ERROR_STATE_CHANGE</para></entry>
<entry role="enum_member_description"><para>used for state change errors.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-PAD:CAPS">GST_CORE_ERROR_PAD</para></entry>
<entry role="enum_member_description"><para>used for pad-related errors.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-THREAD:CAPS">GST_CORE_ERROR_THREAD</para></entry>
<entry role="enum_member_description"><para>used for thread-related errors.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-NEGOTIATION:CAPS">GST_CORE_ERROR_NEGOTIATION</para></entry>
<entry role="enum_member_description"><para>used for negotiation-related errors.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-EVENT:CAPS">GST_CORE_ERROR_EVENT</para></entry>
<entry role="enum_member_description"><para>used for event-related errors.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-SEEK:CAPS">GST_CORE_ERROR_SEEK</para></entry>
<entry role="enum_member_description"><para>used for seek-related errors.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-CAPS">GST_CORE_ERROR_CAPS</para></entry>
<entry role="enum_member_description"><para>used for caps-related errors.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-TAG:CAPS">GST_CORE_ERROR_TAG</para></entry>
<entry role="enum_member_description"><para>used for negotiation-related errors.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-MISSING-PLUGIN:CAPS">GST_CORE_ERROR_MISSING_PLUGIN</para></entry>
<entry role="enum_member_description"><para>used if a plugin is missing.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-CLOCK:CAPS">GST_CORE_ERROR_CLOCK</para></entry>
<entry role="enum_member_description"><para>used for clock related errors.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-DISABLED:CAPS">GST_CORE_ERROR_DISABLED</para></entry>
<entry role="enum_member_description"><para>used if functionality has been disabled at
                          compile time.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-CORE-ERROR-NUM-ERRORS:CAPS">GST_CORE_ERROR_NUM_ERRORS</para></entry>
<entry role="enum_member_description"><para>the number of core error types.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GstLibraryError" role="enum">
<title>enum GstLibraryError</title>
<indexterm zone="GstLibraryError"><primary>GstLibraryError</primary></indexterm>
<para>Library errors are for errors from the library being used by elements
(initializing, finalizing, settings, ...)</para>
<refsect3 id="GstLibraryError.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="GST-LIBRARY-ERROR-FAILED:CAPS">GST_LIBRARY_ERROR_FAILED</para></entry>
<entry role="enum_member_description"><para>a general error which doesn't fit in any other
category.  Make sure you add a custom message to the error call.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-LIBRARY-ERROR-TOO-LAZY:CAPS">GST_LIBRARY_ERROR_TOO_LAZY</para></entry>
<entry role="enum_member_description"><para>do not use this except as a placeholder for
deciding where to go while developing code.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-LIBRARY-ERROR-INIT:CAPS">GST_LIBRARY_ERROR_INIT</para></entry>
<entry role="enum_member_description"><para>used when the library could not be opened.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-LIBRARY-ERROR-SHUTDOWN:CAPS">GST_LIBRARY_ERROR_SHUTDOWN</para></entry>
<entry role="enum_member_description"><para>used when the library could not be closed.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-LIBRARY-ERROR-SETTINGS:CAPS">GST_LIBRARY_ERROR_SETTINGS</para></entry>
<entry role="enum_member_description"><para>used when the library doesn't accept settings.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-LIBRARY-ERROR-ENCODE:CAPS">GST_LIBRARY_ERROR_ENCODE</para></entry>
<entry role="enum_member_description"><para>used when the library generated an encoding error.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-LIBRARY-ERROR-NUM-ERRORS:CAPS">GST_LIBRARY_ERROR_NUM_ERRORS</para></entry>
<entry role="enum_member_description"><para>the number of library error types.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GstResourceError" role="enum">
<title>enum GstResourceError</title>
<indexterm zone="GstResourceError"><primary>GstResourceError</primary></indexterm>
<para>Resource errors are for any resource used by an element:
memory, files, network connections, process space, ...
They're typically used by source and sink elements.</para>
<refsect3 id="GstResourceError.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-FAILED:CAPS">GST_RESOURCE_ERROR_FAILED</para></entry>
<entry role="enum_member_description"><para>a general error which doesn't fit in any other
category.  Make sure you add a custom message to the error call.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-TOO-LAZY:CAPS">GST_RESOURCE_ERROR_TOO_LAZY</para></entry>
<entry role="enum_member_description"><para>do not use this except as a placeholder for
deciding where to go while developing code.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-NOT-FOUND:CAPS">GST_RESOURCE_ERROR_NOT_FOUND</para></entry>
<entry role="enum_member_description"><para>used when the resource could not be found.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-BUSY:CAPS">GST_RESOURCE_ERROR_BUSY</para></entry>
<entry role="enum_member_description"><para>used when resource is busy.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-OPEN-READ:CAPS">GST_RESOURCE_ERROR_OPEN_READ</para></entry>
<entry role="enum_member_description"><para>used when resource fails to open for reading.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-OPEN-WRITE:CAPS">GST_RESOURCE_ERROR_OPEN_WRITE</para></entry>
<entry role="enum_member_description"><para>used when resource fails to open for writing.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-OPEN-READ-WRITE:CAPS">GST_RESOURCE_ERROR_OPEN_READ_WRITE</para></entry>
<entry role="enum_member_description"><para>used when resource cannot be opened for
both reading and writing, or either (but unspecified which).</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-CLOSE:CAPS">GST_RESOURCE_ERROR_CLOSE</para></entry>
<entry role="enum_member_description"><para>used when the resource can't be closed.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-READ:CAPS">GST_RESOURCE_ERROR_READ</para></entry>
<entry role="enum_member_description"><para>used when the resource can't be read from.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-WRITE:CAPS">GST_RESOURCE_ERROR_WRITE</para></entry>
<entry role="enum_member_description"><para>used when the resource can't be written to.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-SEEK:CAPS">GST_RESOURCE_ERROR_SEEK</para></entry>
<entry role="enum_member_description"><para>used when a seek on the resource fails.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-SYNC:CAPS">GST_RESOURCE_ERROR_SYNC</para></entry>
<entry role="enum_member_description"><para>used when a synchronize on the resource fails.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-SETTINGS:CAPS">GST_RESOURCE_ERROR_SETTINGS</para></entry>
<entry role="enum_member_description"><para>used when settings can't be manipulated on.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-NO-SPACE-LEFT:CAPS">GST_RESOURCE_ERROR_NO_SPACE_LEFT</para></entry>
<entry role="enum_member_description"><para>used when the resource has no space left.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-NOT-AUTHORIZED:CAPS">GST_RESOURCE_ERROR_NOT_AUTHORIZED</para></entry>
<entry role="enum_member_description"><para>used when the resource can't be opened
                                    due to missing authorization.
                                    (Since 1.2.4)</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-RESOURCE-ERROR-NUM-ERRORS:CAPS">GST_RESOURCE_ERROR_NUM_ERRORS</para></entry>
<entry role="enum_member_description"><para>the number of resource error types.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GstStreamError" role="enum">
<title>enum GstStreamError</title>
<indexterm zone="GstStreamError"><primary>GstStreamError</primary></indexterm>
<para>Stream errors are for anything related to the stream being processed:
format errors, media type errors, ...
They're typically used by decoders, demuxers, converters, ...</para>
<refsect3 id="GstStreamError.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-FAILED:CAPS">GST_STREAM_ERROR_FAILED</para></entry>
<entry role="enum_member_description"><para>a general error which doesn't fit in any other
category.  Make sure you add a custom message to the error call.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-TOO-LAZY:CAPS">GST_STREAM_ERROR_TOO_LAZY</para></entry>
<entry role="enum_member_description"><para>do not use this except as a placeholder for
deciding where to go while developing code.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-NOT-IMPLEMENTED:CAPS">GST_STREAM_ERROR_NOT_IMPLEMENTED</para></entry>
<entry role="enum_member_description"><para>use this when you do not want to implement
this functionality yet.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-TYPE-NOT-FOUND:CAPS">GST_STREAM_ERROR_TYPE_NOT_FOUND</para></entry>
<entry role="enum_member_description"><para>used when the element doesn't know the
stream's type.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-WRONG-TYPE:CAPS">GST_STREAM_ERROR_WRONG_TYPE</para></entry>
<entry role="enum_member_description"><para>used when the element doesn't handle this type
of stream.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-CODEC-NOT-FOUND:CAPS">GST_STREAM_ERROR_CODEC_NOT_FOUND</para></entry>
<entry role="enum_member_description"><para>used when there's no codec to handle the
stream's type.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-DECODE:CAPS">GST_STREAM_ERROR_DECODE</para></entry>
<entry role="enum_member_description"><para>used when decoding fails.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-ENCODE:CAPS">GST_STREAM_ERROR_ENCODE</para></entry>
<entry role="enum_member_description"><para>used when encoding fails.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-DEMUX:CAPS">GST_STREAM_ERROR_DEMUX</para></entry>
<entry role="enum_member_description"><para>used when demuxing fails.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-MUX:CAPS">GST_STREAM_ERROR_MUX</para></entry>
<entry role="enum_member_description"><para>used when muxing fails.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-FORMAT:CAPS">GST_STREAM_ERROR_FORMAT</para></entry>
<entry role="enum_member_description"><para>used when the stream is of the wrong format
(for example, wrong caps).</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-DECRYPT:CAPS">GST_STREAM_ERROR_DECRYPT</para></entry>
<entry role="enum_member_description"><para>used when the stream is encrypted and can't be
decrypted because this is not supported by the element.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-DECRYPT-NOKEY:CAPS">GST_STREAM_ERROR_DECRYPT_NOKEY</para></entry>
<entry role="enum_member_description"><para>used when the stream is encrypted and
can't be decrypted because no suitable key is available.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-STREAM-ERROR-NUM-ERRORS:CAPS">GST_STREAM_ERROR_NUM_ERRORS</para></entry>
<entry role="enum_member_description"><para>the number of stream error types.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GST-CORE-ERROR:CAPS" role="macro">
<title>GST_CORE_ERROR</title>
<indexterm zone="GST-CORE-ERROR:CAPS"><primary>GST_CORE_ERROR</primary></indexterm>
<programlisting language="C">#define GST_CORE_ERROR      gst_core_error_quark ()
</programlisting>
<para>Error domain for core system. Errors in this domain will
be from the <link linkend="GstCoreError"><type>GstCoreError</type></link> enumeration.
See <link linkend="GError"><type>GError</type></link> for information on error domains.</para>
</refsect2>
<refsect2 id="GST-LIBRARY-ERROR:CAPS" role="macro">
<title>GST_LIBRARY_ERROR</title>
<indexterm zone="GST-LIBRARY-ERROR:CAPS"><primary>GST_LIBRARY_ERROR</primary></indexterm>
<programlisting language="C">#define GST_LIBRARY_ERROR   gst_library_error_quark ()
</programlisting>
<para>Error domain for library loading. Errors in this domain will
be from the <link linkend="GstLibraryError"><type>GstLibraryError</type></link> enumeration.
See <link linkend="GError"><type>GError</type></link> for information on error domains.</para>
</refsect2>
<refsect2 id="GST-RESOURCE-ERROR:CAPS" role="macro">
<title>GST_RESOURCE_ERROR</title>
<indexterm zone="GST-RESOURCE-ERROR:CAPS"><primary>GST_RESOURCE_ERROR</primary></indexterm>
<programlisting language="C">#define GST_RESOURCE_ERROR  gst_resource_error_quark ()
</programlisting>
<para>Error domain for resource handling. Errors in this domain will
be from the <link linkend="GstResourceError"><type>GstResourceError</type></link> enumeration.
See <link linkend="GError"><type>GError</type></link> for information on error domains.</para>
</refsect2>
<refsect2 id="GST-STREAM-ERROR:CAPS" role="macro">
<title>GST_STREAM_ERROR</title>
<indexterm zone="GST-STREAM-ERROR:CAPS"><primary>GST_STREAM_ERROR</primary></indexterm>
<programlisting language="C">#define GST_STREAM_ERROR    gst_stream_error_quark ()
</programlisting>
<para>Error domain for media stream processing. Errors in this domain will
be from the <link linkend="GstStreamError"><type>GstStreamError</type></link> enumeration.
See <link linkend="GError"><type>GError</type></link> for information on error domains.</para>
</refsect2>
<refsect2 id="GST-ERROR-SYSTEM:CAPS" role="macro">
<title>GST_ERROR_SYSTEM</title>
<indexterm zone="GST-ERROR-SYSTEM:CAPS"><primary>GST_ERROR_SYSTEM</primary></indexterm>
<programlisting language="C">#define GST_ERROR_SYSTEM    ("system error: %s", g_strerror (errno))
</programlisting>
<para>Builds a string using errno describing the previously failed system
call.  To be used as the debug argument in <link linkend="GST-ELEMENT-ERROR:CAPS"><type>GST_ELEMENT_ERROR</type></link>.</para>
</refsect2>

</refsect1>
<refsect1 id="gstreamer-GstGError.see-also">
<title>See Also</title>
<para><link linkend="GstMessage"><type>GstMessage</type></link></para>

</refsect1>

</refentry>
