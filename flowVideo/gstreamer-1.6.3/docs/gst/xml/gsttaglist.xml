<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % version-entities SYSTEM "version.entities">
%version-entities;
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY hash "#">
]>
<refentry id="GstTagList">
<refmeta>
<refentrytitle role="top_of_page" id="GstTagList.top_of_page">GstTagList</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GSTREAMER Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GstTagList</refname>
<refpurpose>List of tags and values used to describe media metadata</refpurpose>
</refnamediv>

<refsect1 id="GstTagList.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="GstTagForeachFunc">*GstTagForeachFunc</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="GstTagMergeFunc">*GstTagMergeFunc</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-register">gst_tag_register</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-register-static">gst_tag_register_static</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-merge-use-first">gst_tag_merge_use_first</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-merge-strings-with-comma">gst_tag_merge_strings_with_comma</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-exists">gst_tag_exists</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GType"><returnvalue>GType</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-get-type">gst_tag_get_type</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-tag-get-nick">gst_tag_get_nick</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-tag-get-description">gst_tag_get_description</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GstTagFlag"><returnvalue>GstTagFlag</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-get-flag">gst_tag_get_flag</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-is-fixed">gst_tag_is_fixed</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-tag-list-new">gst_tag_list_new</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-tag-list-new-empty">gst_tag_list_new_empty</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-tag-list-new-valist">gst_tag_list_new_valist</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-tag-list-new-from-string">gst_tag_list_new_from_string</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="gst-tag-list-free">gst_tag_list_free</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GstTagScope"><returnvalue>GstTagScope</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-scope">gst_tag_list_get_scope</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-set-scope">gst_tag_list_set_scope</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-tag-list-to-string">gst_tag_list_to_string</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-is-empty">gst_tag_list_is_empty</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-is-equal">gst_tag_list_is_equal</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-tag-list-copy">gst_tag_list_copy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-tag-list-ref">gst_tag_list_ref</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-unref">gst_tag_list_unref</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="gst-tag-list-is-writable">gst_tag_list_is_writable</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="gst-tag-list-make-writable">gst_tag_list_make_writable</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-insert">gst_tag_list_insert</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-tag-list-merge">gst_tag_list_merge</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="guint"><returnvalue>guint</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-tag-size">gst_tag_list_get_tag_size</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gint"><returnvalue>gint</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-n-tags">gst_tag_list_n_tags</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-tag-list-nth-tag-name">gst_tag_list_nth_tag_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-add">gst_tag_list_add</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-add-value">gst_tag_list_add_value</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-add-values">gst_tag_list_add_values</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-add-valist">gst_tag_list_add_valist</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-add-valist-values">gst_tag_list_add_valist_values</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-remove-tag">gst_tag_list_remove_tag</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-foreach">gst_tag_list_foreach</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="GValue"><returnvalue>GValue</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-tag-list-get-value-index">gst_tag_list_get_value_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-copy-value">gst_tag_list_copy_value</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-boolean">gst_tag_list_get_boolean</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-boolean-index">gst_tag_list_get_boolean_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-int">gst_tag_list_get_int</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-int-index">gst_tag_list_get_int_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-uint">gst_tag_list_get_uint</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-uint-index">gst_tag_list_get_uint_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-int64">gst_tag_list_get_int64</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-int64-index">gst_tag_list_get_int64_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-uint64">gst_tag_list_get_uint64</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-uint64-index">gst_tag_list_get_uint64_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-float">gst_tag_list_get_float</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-float-index">gst_tag_list_get_float_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-double">gst_tag_list_get_double</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-double-index">gst_tag_list_get_double_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-string">gst_tag_list_get_string</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-string-index">gst_tag_list_get_string_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-peek-string-index">gst_tag_list_peek_string_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-pointer">gst_tag_list_get_pointer</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-pointer-index">gst_tag_list_get_pointer_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-date">gst_tag_list_get_date</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-date-index">gst_tag_list_get_date_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-date-time">gst_tag_list_get_date_time</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-date-time-index">gst_tag_list_get_date_time_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-sample">gst_tag_list_get_sample</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-tag-list-get-sample-index">gst_tag_list_get_sample_index</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GstTagList.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GstTagList-struct">GstTagList</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GstTagMergeMode">GstTagMergeMode</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GstTagFlag">GstTagFlag</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GstTagScope">GstTagScope</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-TITLE:CAPS">GST_TAG_TITLE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-TITLE-SORTNAME:CAPS">GST_TAG_TITLE_SORTNAME</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ARTIST:CAPS">GST_TAG_ARTIST</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ARTIST-SORTNAME:CAPS">GST_TAG_ARTIST_SORTNAME</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ALBUM:CAPS">GST_TAG_ALBUM</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ALBUM-SORTNAME:CAPS">GST_TAG_ALBUM_SORTNAME</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ALBUM-ARTIST:CAPS">GST_TAG_ALBUM_ARTIST</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ALBUM-ARTIST-SORTNAME:CAPS">GST_TAG_ALBUM_ARTIST_SORTNAME</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-DATE:CAPS">GST_TAG_DATE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-DATE-TIME:CAPS">GST_TAG_DATE_TIME</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-GENRE:CAPS">GST_TAG_GENRE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-COMMENT:CAPS">GST_TAG_COMMENT</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-EXTENDED-COMMENT:CAPS">GST_TAG_EXTENDED_COMMENT</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-TRACK-NUMBER:CAPS">GST_TAG_TRACK_NUMBER</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-TRACK-COUNT:CAPS">GST_TAG_TRACK_COUNT</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ALBUM-VOLUME-NUMBER:CAPS">GST_TAG_ALBUM_VOLUME_NUMBER</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ALBUM-VOLUME-COUNT:CAPS">GST_TAG_ALBUM_VOLUME_COUNT</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-LOCATION:CAPS">GST_TAG_LOCATION</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-HOMEPAGE:CAPS">GST_TAG_HOMEPAGE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-DESCRIPTION:CAPS">GST_TAG_DESCRIPTION</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-VERSION:CAPS">GST_TAG_VERSION</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ISRC:CAPS">GST_TAG_ISRC</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ORGANIZATION:CAPS">GST_TAG_ORGANIZATION</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-COPYRIGHT:CAPS">GST_TAG_COPYRIGHT</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-COPYRIGHT-URI:CAPS">GST_TAG_COPYRIGHT_URI</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ENCODED-BY:CAPS">GST_TAG_ENCODED_BY</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-COMPOSER:CAPS">GST_TAG_COMPOSER</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-CONTACT:CAPS">GST_TAG_CONTACT</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-LICENSE:CAPS">GST_TAG_LICENSE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-LICENSE-URI:CAPS">GST_TAG_LICENSE_URI</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-PERFORMER:CAPS">GST_TAG_PERFORMER</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-DURATION:CAPS">GST_TAG_DURATION</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-CODEC:CAPS">GST_TAG_CODEC</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-VIDEO-CODEC:CAPS">GST_TAG_VIDEO_CODEC</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-AUDIO-CODEC:CAPS">GST_TAG_AUDIO_CODEC</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-SUBTITLE-CODEC:CAPS">GST_TAG_SUBTITLE_CODEC</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-CONTAINER-FORMAT:CAPS">GST_TAG_CONTAINER_FORMAT</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-BITRATE:CAPS">GST_TAG_BITRATE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-NOMINAL-BITRATE:CAPS">GST_TAG_NOMINAL_BITRATE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-MINIMUM-BITRATE:CAPS">GST_TAG_MINIMUM_BITRATE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-MAXIMUM-BITRATE:CAPS">GST_TAG_MAXIMUM_BITRATE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-SERIAL:CAPS">GST_TAG_SERIAL</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ENCODER:CAPS">GST_TAG_ENCODER</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ENCODER-VERSION:CAPS">GST_TAG_ENCODER_VERSION</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-TRACK-GAIN:CAPS">GST_TAG_TRACK_GAIN</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-TRACK-PEAK:CAPS">GST_TAG_TRACK_PEAK</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ALBUM-GAIN:CAPS">GST_TAG_ALBUM_GAIN</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ALBUM-PEAK:CAPS">GST_TAG_ALBUM_PEAK</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-REFERENCE-LEVEL:CAPS">GST_TAG_REFERENCE_LEVEL</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-LANGUAGE-CODE:CAPS">GST_TAG_LANGUAGE_CODE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-LANGUAGE-NAME:CAPS">GST_TAG_LANGUAGE_NAME</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-IMAGE:CAPS">GST_TAG_IMAGE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-PREVIEW-IMAGE:CAPS">GST_TAG_PREVIEW_IMAGE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-ATTACHMENT:CAPS">GST_TAG_ATTACHMENT</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-BEATS-PER-MINUTE:CAPS">GST_TAG_BEATS_PER_MINUTE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-KEYWORDS:CAPS">GST_TAG_KEYWORDS</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-GEO-LOCATION-NAME:CAPS">GST_TAG_GEO_LOCATION_NAME</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-GEO-LOCATION-LATITUDE:CAPS">GST_TAG_GEO_LOCATION_LATITUDE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-GEO-LOCATION-LONGITUDE:CAPS">GST_TAG_GEO_LOCATION_LONGITUDE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-GEO-LOCATION-ELEVATION:CAPS">GST_TAG_GEO_LOCATION_ELEVATION</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-GEO-LOCATION-CITY:CAPS">GST_TAG_GEO_LOCATION_CITY</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-GEO-LOCATION-COUNTRY:CAPS">GST_TAG_GEO_LOCATION_COUNTRY</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-GEO-LOCATION-SUBLOCATION:CAPS">GST_TAG_GEO_LOCATION_SUBLOCATION</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-GEO-LOCATION-HORIZONTAL-ERROR:CAPS">GST_TAG_GEO_LOCATION_HORIZONTAL_ERROR</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-GEO-LOCATION-MOVEMENT-DIRECTION:CAPS">GST_TAG_GEO_LOCATION_MOVEMENT_DIRECTION</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-GEO-LOCATION-MOVEMENT-SPEED:CAPS">GST_TAG_GEO_LOCATION_MOVEMENT_SPEED</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-GEO-LOCATION-CAPTURE-DIRECTION:CAPS">GST_TAG_GEO_LOCATION_CAPTURE_DIRECTION</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-SHOW-NAME:CAPS">GST_TAG_SHOW_NAME</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-SHOW-SORTNAME:CAPS">GST_TAG_SHOW_SORTNAME</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-SHOW-EPISODE-NUMBER:CAPS">GST_TAG_SHOW_EPISODE_NUMBER</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-SHOW-SEASON-NUMBER:CAPS">GST_TAG_SHOW_SEASON_NUMBER</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-LYRICS:CAPS">GST_TAG_LYRICS</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-COMPOSER-SORTNAME:CAPS">GST_TAG_COMPOSER_SORTNAME</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-GROUPING:CAPS">GST_TAG_GROUPING</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-USER-RATING:CAPS">GST_TAG_USER_RATING</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-DEVICE-MANUFACTURER:CAPS">GST_TAG_DEVICE_MANUFACTURER</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-DEVICE-MODEL:CAPS">GST_TAG_DEVICE_MODEL</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-APPLICATION-NAME:CAPS">GST_TAG_APPLICATION_NAME</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-APPLICATION-DATA:CAPS">GST_TAG_APPLICATION_DATA</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-IMAGE-ORIENTATION:CAPS">GST_TAG_IMAGE_ORIENTATION</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-PUBLISHER:CAPS">GST_TAG_PUBLISHER</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-INTERPRETED-BY:CAPS">GST_TAG_INTERPRETED_BY</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-TAG-MIDI-BASE-NOTE:CAPS">GST_TAG_MIDI_BASE_NOTE</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GstTagList.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GBoxed">GBoxed</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GstTagList
</screen>
</refsect1>

<refsect1 id="GstTagList.includes"><title>Includes</title><synopsis>#include &lt;gst/gst.h&gt;
</synopsis></refsect1>

<refsect1 id="GstTagList.description" role="desc">
<title role="desc.title">Description</title>
<para>List of tags and values used to describe media metadata.</para>
<para>Strings in structures must be ASCII or UTF-8 encoded. Other encodings are
not allowed. Strings must not be empty or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>

</refsect1>
<refsect1 id="GstTagList.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="GstTagForeachFunc" role="function">
<title>GstTagForeachFunc&#160;()</title>
<indexterm zone="GstTagForeachFunc"><primary>GstTagForeachFunc</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*GstTagForeachFunc<phrase role="c_punctuation">)</phrase> (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                      <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                      <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>A function that will be called in <link linkend="gst-tag-list-foreach"><function>gst_tag_list_foreach()</function></link>. The function may
not modify the tag list.</para>
<refsect3 id="GstTagForeachFunc.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>the <link linkend="GstTagList"><type>GstTagList</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>a name of a tag in <parameter>list</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>user data</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GstTagMergeFunc" role="function">
<title>GstTagMergeFunc&#160;()</title>
<indexterm zone="GstTagMergeFunc"><primary>GstTagMergeFunc</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*GstTagMergeFunc<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="GValue"><type>GValue</type></link> *dest</parameter>,
                    <parameter>const <link linkend="GValue"><type>GValue</type></link> *src</parameter>);</programlisting>
<para>A function for merging multiple values of a tag used when registering
tags.</para>
<refsect3 id="GstTagMergeFunc.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dest</para></entry>
<entry role="parameter_description"><para>the destination <link linkend="GValue"><type>GValue</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>src</para></entry>
<entry role="parameter_description"><para>the source <link linkend="GValue"><type>GValue</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-register" role="function">
<title>gst_tag_register&#160;()</title>
<indexterm zone="gst-tag-register"><primary>gst_tag_register</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_register (<parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                  <parameter><link linkend="GstTagFlag"><type>GstTagFlag</type></link> flag</parameter>,
                  <parameter><link linkend="GType"><type>GType</type></link> type</parameter>,
                  <parameter>const <link linkend="gchar"><type>gchar</type></link> *nick</parameter>,
                  <parameter>const <link linkend="gchar"><type>gchar</type></link> *blurb</parameter>,
                  <parameter><link linkend="GstTagMergeFunc"><type>GstTagMergeFunc</type></link> func</parameter>);</programlisting>
<para>Registers a new tag type for the use with GStreamer's type system. If a type
with that name is already registered, that one is used.
The old registration may have used a different type however. So don't rely
on your supplied values.</para>
<para>Important: if you do not supply a merge function the implication will be
that there can only be one single value for this tag in a tag list and
any additional values will silently be discarded when being added (unless
<link linkend="GST-TAG-MERGE-REPLACE:CAPS"><type>GST_TAG_MERGE_REPLACE</type></link>, <link linkend="GST-TAG-MERGE-REPLACE-ALL:CAPS"><type>GST_TAG_MERGE_REPLACE_ALL</type></link>, or
<link linkend="GST-TAG-MERGE-PREPEND:CAPS"><type>GST_TAG_MERGE_PREPEND</type></link> is used as merge mode, in which case the new
value will replace the old one in the list).</para>
<para>The merge function will be called from <link linkend="gst-tag-list-copy-value"><function>gst_tag_list_copy_value()</function></link> when
it is required that one or more values for a tag be condensed into
one single value. This may happen from <link linkend="gst-tag-list-get-string"><function>gst_tag_list_get_string()</function></link>,
<link linkend="gst-tag-list-get-int"><function>gst_tag_list_get_int()</function></link>, <link linkend="gst-tag-list-get-double"><function>gst_tag_list_get_double()</function></link> etc. What will happen
exactly in that case depends on how the tag was registered and if a
merge function was supplied and if so which one.</para>
<para>Two default merge functions are provided: <link linkend="gst-tag-merge-use-first"><function>gst_tag_merge_use_first()</function></link> and
<link linkend="gst-tag-merge-strings-with-comma"><function>gst_tag_merge_strings_with_comma()</function></link>.</para>
<refsect3 id="gst-tag-register.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the name or identifier string</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flag</para></entry>
<entry role="parameter_description"><para>a flag describing the type of tag info</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>type</para></entry>
<entry role="parameter_description"><para>the type this data is in</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>nick</para></entry>
<entry role="parameter_description"><para>human-readable name</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>blurb</para></entry>
<entry role="parameter_description"><para>a human-readable description about this tag</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>func</para></entry>
<entry role="parameter_description"><para> function for merging multiple values of this tag, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>allow-none</acronym>][<acronym>scope call</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-register-static" role="function">
<title>gst_tag_register_static&#160;()</title>
<indexterm zone="gst-tag-register-static"><primary>gst_tag_register_static</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_register_static (<parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                         <parameter><link linkend="GstTagFlag"><type>GstTagFlag</type></link> flag</parameter>,
                         <parameter><link linkend="GType"><type>GType</type></link> type</parameter>,
                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *nick</parameter>,
                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *blurb</parameter>,
                         <parameter><link linkend="GstTagMergeFunc"><type>GstTagMergeFunc</type></link> func</parameter>);</programlisting>
<para>Registers a new tag type for the use with GStreamer's type system.</para>
<para>Same as <link linkend="gst-tag-register"><function>gst_tag_register()</function></link>, but <parameter>name</parameter>
, <parameter>nick</parameter>
, and <parameter>blurb</parameter>
 must be
static strings or inlined strings, as they will not be copied. (GStreamer
plugins will be made resident once loaded, so this function can be used
even from dynamically loaded plugins.)</para>
<refsect3 id="gst-tag-register-static.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the name or identifier string (string constant)</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flag</para></entry>
<entry role="parameter_description"><para>a flag describing the type of tag info</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>type</para></entry>
<entry role="parameter_description"><para>the type this data is in</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>nick</para></entry>
<entry role="parameter_description"><para>human-readable name or short description (string constant)</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>blurb</para></entry>
<entry role="parameter_description"><para>a human-readable description for this tag (string constant)</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>func</para></entry>
<entry role="parameter_description"><para> function for merging multiple values of this tag, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>allow-none</acronym>][<acronym>scope call</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-merge-use-first" role="function">
<title>gst_tag_merge_use_first&#160;()</title>
<indexterm zone="gst-tag-merge-use-first"><primary>gst_tag_merge_use_first</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_merge_use_first (<parameter><link linkend="GValue"><type>GValue</type></link> *dest</parameter>,
                         <parameter>const <link linkend="GValue"><type>GValue</type></link> *src</parameter>);</programlisting>
<para>This is a convenience function for the func argument of <link linkend="gst-tag-register"><function>gst_tag_register()</function></link>.
It creates a copy of the first value from the list.</para>
<refsect3 id="gst-tag-merge-use-first.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dest</para></entry>
<entry role="parameter_description"><para> uninitialized GValue to store result in. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out caller-allocates</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>src</para></entry>
<entry role="parameter_description"><para>GValue to copy from</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-merge-strings-with-comma" role="function">
<title>gst_tag_merge_strings_with_comma&#160;()</title>
<indexterm zone="gst-tag-merge-strings-with-comma"><primary>gst_tag_merge_strings_with_comma</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_merge_strings_with_comma (<parameter><link linkend="GValue"><type>GValue</type></link> *dest</parameter>,
                                  <parameter>const <link linkend="GValue"><type>GValue</type></link> *src</parameter>);</programlisting>
<para>This is a convenience function for the func argument of <link linkend="gst-tag-register"><function>gst_tag_register()</function></link>.
It concatenates all given strings using a comma. The tag must be registered
as a G_TYPE_STRING or this function will fail.</para>
<refsect3 id="gst-tag-merge-strings-with-comma.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dest</para></entry>
<entry role="parameter_description"><para> uninitialized GValue to store result in. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out caller-allocates</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>src</para></entry>
<entry role="parameter_description"><para>GValue to copy from</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-exists" role="function">
<title>gst_tag_exists&#160;()</title>
<indexterm zone="gst-tag-exists"><primary>gst_tag_exists</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_exists (<parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>);</programlisting>
<para>Checks if the given type is already registered.</para>
<refsect3 id="gst-tag-exists.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>name of the tag</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-exists.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the type is already registered</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-get-type" role="function">
<title>gst_tag_get_type&#160;()</title>
<indexterm zone="gst-tag-get-type"><primary>gst_tag_get_type</primary></indexterm>
<programlisting language="C"><link linkend="GType"><returnvalue>GType</returnvalue></link>
gst_tag_get_type (<parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>);</programlisting>
<para>Gets the <link linkend="GType"><type>GType</type></link> used for this tag.</para>
<refsect3 id="gst-tag-get-type.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>the tag</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-get-type.returns" role="returns">
<title>Returns</title>
<para> the <link linkend="GType"><type>GType</type></link> of this tag</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-get-nick" role="function">
<title>gst_tag_get_nick&#160;()</title>
<indexterm zone="gst-tag-get-nick"><primary>gst_tag_get_nick</primary></indexterm>
<programlisting language="C">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
gst_tag_get_nick (<parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>);</programlisting>
<para>Returns the human-readable name of this tag, You must not change or free
this string.</para>
<refsect3 id="gst-tag-get-nick.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>the tag</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-get-nick.returns" role="returns">
<title>Returns</title>
<para> the human-readable name of this tag</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-get-description" role="function">
<title>gst_tag_get_description&#160;()</title>
<indexterm zone="gst-tag-get-description"><primary>gst_tag_get_description</primary></indexterm>
<programlisting language="C">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
gst_tag_get_description (<parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>);</programlisting>
<para>Returns the human-readable description of this tag, You must not change or
free this string.</para>
<refsect3 id="gst-tag-get-description.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>the tag</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-get-description.returns" role="returns">
<title>Returns</title>
<para> the human-readable description of this tag</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-get-flag" role="function">
<title>gst_tag_get_flag&#160;()</title>
<indexterm zone="gst-tag-get-flag"><primary>gst_tag_get_flag</primary></indexterm>
<programlisting language="C"><link linkend="GstTagFlag"><returnvalue>GstTagFlag</returnvalue></link>
gst_tag_get_flag (<parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>);</programlisting>
<para>Gets the flag of <parameter>tag</parameter>
.</para>
<refsect3 id="gst-tag-get-flag.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>the tag</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-get-flag.returns" role="returns">
<title>Returns</title>
<para> the flag of this tag.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-is-fixed" role="function">
<title>gst_tag_is_fixed&#160;()</title>
<indexterm zone="gst-tag-is-fixed"><primary>gst_tag_is_fixed</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_is_fixed (<parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>);</programlisting>
<para>Checks if the given tag is fixed. A fixed tag can only contain one value.
Unfixed tags can contain lists of values.</para>
<refsect3 id="gst-tag-is-fixed.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to check</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-is-fixed.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if the given tag is fixed.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-new" role="function">
<title>gst_tag_list_new&#160;()</title>
<indexterm zone="gst-tag-list-new"><primary>gst_tag_list_new</primary></indexterm>
<programlisting language="C"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
gst_tag_list_new (<parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                  <parameter>...</parameter>);</programlisting>
<para>Creates a new taglist and appends the values for the given tags. It expects
tag-value pairs like <link linkend="gst-tag-list-add"><function>gst_tag_list_add()</function></link>, and a <link linkend="NULL:CAPS"><literal>NULL</literal></link> terminator after the
last pair. The type of the values is implicit and is documented in the API
reference, but can also be queried at runtime with <link linkend="gst-tag-get-type"><function>gst_tag_get_type()</function></link>. It
is an error to pass a value of a type not matching the tag type into this
function. The tag list will make copies of any arguments passed
(e.g. strings, buffers).</para>
<para>After creation you might also want to set a <link linkend="GstTagScope"><type>GstTagScope</type></link> on the returned
taglist to signal if the contained tags are global or stream tags. By
default stream scope is assumes. See <link linkend="gst-tag-list-set-scope"><function>gst_tag_list_set_scope()</function></link>.</para>
<para>Free-function: gst_tag_list_unref</para>
<refsect3 id="gst-tag-list-new.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>...</para></entry>
<entry role="parameter_description"><para><link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated list of values to set</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-new.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GstTagList"><type>GstTagList</type></link>. Free with <link linkend="gst-tag-list-unref"><function>gst_tag_list_unref()</function></link>
when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-new-empty" role="function">
<title>gst_tag_list_new_empty&#160;()</title>
<indexterm zone="gst-tag-list-new-empty"><primary>gst_tag_list_new_empty</primary></indexterm>
<programlisting language="C"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
gst_tag_list_new_empty (<parameter><type>void</type></parameter>);</programlisting>
<para>Creates a new empty GstTagList.</para>
<para>Free-function: gst_tag_list_unref</para>
<refsect3 id="gst-tag-list-new-empty.returns" role="returns">
<title>Returns</title>
<para> An empty tag list. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-new-valist" role="function">
<title>gst_tag_list_new_valist&#160;()</title>
<indexterm zone="gst-tag-list-new-valist"><primary>gst_tag_list_new_valist</primary></indexterm>
<programlisting language="C"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
gst_tag_list_new_valist (<parameter><link linkend="va-list"><type>va_list</type></link> var_args</parameter>);</programlisting>
<para>Just like <link linkend="gst-tag-list-new"><function>gst_tag_list_new()</function></link>, only that it takes a va_list argument.
Useful mostly for language bindings.</para>
<para>Free-function: gst_tag_list_unref</para>
<refsect3 id="gst-tag-list-new-valist.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>var_args</para></entry>
<entry role="parameter_description"><para>tag / value pairs to set</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-new-valist.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GstTagList"><type>GstTagList</type></link>. Free with <link linkend="gst-tag-list-unref"><function>gst_tag_list_unref()</function></link>
when no longer needed. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-new-from-string" role="function">
<title>gst_tag_list_new_from_string&#160;()</title>
<indexterm zone="gst-tag-list-new-from-string"><primary>gst_tag_list_new_from_string</primary></indexterm>
<programlisting language="C"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
gst_tag_list_new_from_string (<parameter>const <link linkend="gchar"><type>gchar</type></link> *str</parameter>);</programlisting>
<para>Deserializes a tag list.</para>
<refsect3 id="gst-tag-list-new-from-string.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>str</para></entry>
<entry role="parameter_description"><para>a string created with <link linkend="gst-tag-list-to-string"><function>gst_tag_list_to_string()</function></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-new-from-string.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GstTagList"><type>GstTagList</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> in case of an
error. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-free" role="macro" condition="deprecated:">
<title>gst_tag_list_free()</title>
<indexterm zone="gst-tag-list-free" role="deprecated"><primary>gst_tag_list_free</primary></indexterm>
<programlisting language="C">#define gst_tag_list_free(taglist)    gst_tag_list_unref(taglist)
</programlisting>
<warning><para><literal>gst_tag_list_free</literal> is deprecated and should not be used in newly-written code.</para></warning>
</refsect2>
<refsect2 id="gst-tag-list-get-scope" role="function">
<title>gst_tag_list_get_scope&#160;()</title>
<indexterm zone="gst-tag-list-get-scope"><primary>gst_tag_list_get_scope</primary></indexterm>
<programlisting language="C"><link linkend="GstTagScope"><returnvalue>GstTagScope</returnvalue></link>
gst_tag_list_get_scope (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>);</programlisting>
<para>Gets the scope of <parameter>list</parameter>
.</para>
<refsect3 id="gst-tag-list-get-scope.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-scope.returns" role="returns">
<title>Returns</title>
<para> The scope of <parameter>list</parameter>
</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-set-scope" role="function">
<title>gst_tag_list_set_scope&#160;()</title>
<indexterm zone="gst-tag-list-set-scope"><primary>gst_tag_list_set_scope</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_list_set_scope (<parameter><link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                        <parameter><link linkend="GstTagScope"><type>GstTagScope</type></link> scope</parameter>);</programlisting>
<para>Sets the scope of <parameter>list</parameter>
 to <parameter>scope</parameter>
. By default the scope
of a taglist is stream scope.</para>
<refsect3 id="gst-tag-list-set-scope.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>scope</para></entry>
<entry role="parameter_description"><para>new scope for <parameter>list</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-to-string" role="function">
<title>gst_tag_list_to_string&#160;()</title>
<indexterm zone="gst-tag-list-to-string"><primary>gst_tag_list_to_string</primary></indexterm>
<programlisting language="C"><link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
gst_tag_list_to_string (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>);</programlisting>
<para>Serializes a tag list to a string.</para>
<refsect3 id="gst-tag-list-to-string.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-to-string.returns" role="returns">
<title>Returns</title>
<para> a newly-allocated string, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> in case of
an error. The string must be freed with <link linkend="g-free"><function>g_free()</function></link> when no longer
needed. </para>
<para><emphasis role="annotation">[<acronym>nullable</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-is-empty" role="function">
<title>gst_tag_list_is_empty&#160;()</title>
<indexterm zone="gst-tag-list-is-empty"><primary>gst_tag_list_is_empty</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_is_empty (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>);</programlisting>
<para>Checks if the given taglist is empty.</para>
<refsect3 id="gst-tag-list-is-empty.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>A <link linkend="GstTagList"><type>GstTagList</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-is-empty.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the taglist is empty, otherwise <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-is-equal" role="function">
<title>gst_tag_list_is_equal&#160;()</title>
<indexterm zone="gst-tag-list-is-equal"><primary>gst_tag_list_is_equal</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_is_equal (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list1</parameter>,
                       <parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list2</parameter>);</programlisting>
<para>Checks if the two given taglists are equal.</para>
<refsect3 id="gst-tag-list-is-equal.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list1</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>list2</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-is-equal.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the taglists are equal, otherwise <link linkend="FALSE:CAPS"><literal>FALSE</literal></link></para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-copy" role="function">
<title>gst_tag_list_copy&#160;()</title>
<indexterm zone="gst-tag-list-copy"><primary>gst_tag_list_copy</primary></indexterm>
<programlisting language="C"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
gst_tag_list_copy (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *taglist</parameter>);</programlisting>
<para>Creates a new <link linkend="GstTagList"><type>GstTagList</type></link> as a copy of the old <parameter>taglist</parameter>
. The new taglist
will have a refcount of 1, owned by the caller, and will be writable as
a result.</para>
<para>Note that this function is the semantic equivalent of a <link linkend="gst-tag-list-ref"><function>gst_tag_list_ref()</function></link>
followed by a <link linkend="gst-tag-list-make-writable"><function>gst_tag_list_make_writable()</function></link>. If you only want to hold on to a
reference to the data, you should use <link linkend="gst-tag-list-ref"><function>gst_tag_list_ref()</function></link>.</para>
<para>When you are finished with the taglist, call <link linkend="gst-tag-list-unref"><function>gst_tag_list_unref()</function></link> on it.</para>
<refsect3 id="gst-tag-list-copy.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>taglist</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-copy.returns" role="returns">
<title>Returns</title>
<para> the new <link linkend="GstTagList"><type>GstTagList</type></link></para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-ref" role="function">
<title>gst_tag_list_ref&#160;()</title>
<indexterm zone="gst-tag-list-ref"><primary>gst_tag_list_ref</primary></indexterm>
<programlisting language="C"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
gst_tag_list_ref (<parameter><link linkend="GstTagList"><type>GstTagList</type></link> *taglist</parameter>);</programlisting>
<para>Add a reference to a <link linkend="GstTagList"><type>GstTagList</type></link> mini object.</para>
<para>From this point on, until the caller calls <link linkend="gst-tag-list-unref"><function>gst_tag_list_unref()</function></link> or
<link linkend="gst-tag-list-make-writable"><function>gst_tag_list_make_writable()</function></link>, it is guaranteed that the taglist object will
not change. To use a <link linkend="GstTagList"><type>GstTagList</type></link> object, you must always have a refcount on
it -- either the one made implicitly by e.g. <link linkend="gst-tag-list-new"><function>gst_tag_list_new()</function></link>, or via
taking one explicitly with this function.</para>
<refsect3 id="gst-tag-list-ref.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>taglist</para></entry>
<entry role="parameter_description"><para>the <link linkend="GstTagList"><type>GstTagList</type></link> to reference</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-ref.returns" role="returns">
<title>Returns</title>
<para> the same <link linkend="GstTagList"><type>GstTagList</type></link> mini object.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-unref" role="function">
<title>gst_tag_list_unref&#160;()</title>
<indexterm zone="gst-tag-list-unref"><primary>gst_tag_list_unref</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_list_unref (<parameter><link linkend="GstTagList"><type>GstTagList</type></link> *taglist</parameter>);</programlisting>
<para>Unref a <link linkend="GstTagList"><type>GstTagList</type></link>, and and free all its memory when the refcount reaches 0.</para>
<refsect3 id="gst-tag-list-unref.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>taglist</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-is-writable" role="macro">
<title>gst_tag_list_is_writable()</title>
<indexterm zone="gst-tag-list-is-writable"><primary>gst_tag_list_is_writable</primary></indexterm>
<programlisting language="C">#define gst_tag_list_is_writable(taglist)    gst_mini_object_is_writable (GST_MINI_OBJECT_CAST (taglist))
</programlisting>
<para>Tests if you can safely modify <parameter>taglist</parameter>
. It is only safe to modify taglist
when there is only one owner of the taglist - ie, the refcount is 1.</para>
<refsect3 id="gst-tag-list-is-writable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>taglist</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-make-writable" role="macro">
<title>gst_tag_list_make_writable()</title>
<indexterm zone="gst-tag-list-make-writable"><primary>gst_tag_list_make_writable</primary></indexterm>
<programlisting language="C">#define gst_tag_list_make_writable(taglist)   GST_TAG_LIST (gst_mini_object_make_writable (GST_MINI_OBJECT_CAST (taglist)))
</programlisting>
<para>Returns a writable copy of <parameter>taglist</parameter>
.</para>
<para>If there is only one reference count on <parameter>taglist</parameter>
, the caller must be the
owner, and so this function will return the taglist object unchanged. If on
the other hand there is more than one reference on the object, a new taglist
object will be returned (which will be a copy of <parameter>taglist</parameter>
). The caller's
reference on <parameter>taglist</parameter>
 will be removed, and instead the caller will own a
reference to the returned object.</para>
<para>In short, this function unrefs the taglist in the argument and refs the
taglist that it returns. Don't access the argument after calling this
function. See also: <link linkend="gst-tag-list-ref"><function>gst_tag_list_ref()</function></link>.</para>
<refsect3 id="gst-tag-list-make-writable.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>taglist</para></entry>
<entry role="parameter_description"><para> a <link linkend="GstTagList"><type>GstTagList</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-make-writable.returns" role="returns">
<title>Returns</title>
<para> a writable taglist which may or may not be the
same as <parameter>taglist</parameter>
. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-insert" role="function">
<title>gst_tag_list_insert&#160;()</title>
<indexterm zone="gst-tag-list-insert"><primary>gst_tag_list_insert</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_list_insert (<parameter><link linkend="GstTagList"><type>GstTagList</type></link> *into</parameter>,
                     <parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *from</parameter>,
                     <parameter><link linkend="GstTagMergeMode"><type>GstTagMergeMode</type></link> mode</parameter>);</programlisting>
<para>Inserts the tags of the <parameter>from</parameter>
 list into the first list using the given mode.</para>
<refsect3 id="gst-tag-list-insert.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>into</para></entry>
<entry role="parameter_description"><para>list to merge into</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>from</para></entry>
<entry role="parameter_description"><para>list to merge from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mode</para></entry>
<entry role="parameter_description"><para>the mode to use</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-merge" role="function">
<title>gst_tag_list_merge&#160;()</title>
<indexterm zone="gst-tag-list-merge"><primary>gst_tag_list_merge</primary></indexterm>
<programlisting language="C"><link linkend="GstTagList"><returnvalue>GstTagList</returnvalue></link>&#160;*
gst_tag_list_merge (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list1</parameter>,
                    <parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list2</parameter>,
                    <parameter><link linkend="GstTagMergeMode"><type>GstTagMergeMode</type></link> mode</parameter>);</programlisting>
<para>Merges the two given lists into a new list. If one of the lists is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, a
copy of the other is returned. If both lists are <link linkend="NULL:CAPS"><literal>NULL</literal></link>, <link linkend="NULL:CAPS"><literal>NULL</literal></link> is returned.</para>
<para>Free-function: gst_tag_list_unref</para>
<refsect3 id="gst-tag-list-merge.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list1</para></entry>
<entry role="parameter_description"><para> first list to merge. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>allow-none</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>list2</para></entry>
<entry role="parameter_description"><para> second list to merge. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>allow-none</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>mode</para></entry>
<entry role="parameter_description"><para>the mode to use</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-merge.returns" role="returns">
<title>Returns</title>
<para> the new list. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>][<acronym>nullable</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-tag-size" role="function">
<title>gst_tag_list_get_tag_size&#160;()</title>
<indexterm zone="gst-tag-list-get-tag-size"><primary>gst_tag_list_get_tag_size</primary></indexterm>
<programlisting language="C"><link linkend="guint"><returnvalue>guint</returnvalue></link>
gst_tag_list_get_tag_size (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                           <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>);</programlisting>
<para>Checks how many value are stored in this tag list for the given tag.</para>
<refsect3 id="gst-tag-list-get-tag-size.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a taglist</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>the tag to query</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-tag-size.returns" role="returns">
<title>Returns</title>
<para> The number of tags stored</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-n-tags" role="function">
<title>gst_tag_list_n_tags&#160;()</title>
<indexterm zone="gst-tag-list-n-tags"><primary>gst_tag_list_n_tags</primary></indexterm>
<programlisting language="C"><link linkend="gint"><returnvalue>gint</returnvalue></link>
gst_tag_list_n_tags (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>);</programlisting>
<para>Get the number of tags in <parameter>list</parameter>
.</para>
<refsect3 id="gst-tag-list-n-tags.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>A <link linkend="GstTagList"><type>GstTagList</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-n-tags.returns" role="returns">
<title>Returns</title>
<para> The number of tags in <parameter>list</parameter>
.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-nth-tag-name" role="function">
<title>gst_tag_list_nth_tag_name&#160;()</title>
<indexterm zone="gst-tag-list-nth-tag-name"><primary>gst_tag_list_nth_tag_name</primary></indexterm>
<programlisting language="C">const <link linkend="gchar"><returnvalue>gchar</returnvalue></link>&#160;*
gst_tag_list_nth_tag_name (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                           <parameter><link linkend="guint"><type>guint</type></link> index</parameter>);</programlisting>
<para>Get the name of the tag in <parameter>list</parameter>
 at <parameter>index</parameter>
.</para>
<refsect3 id="gst-tag-list-nth-tag-name.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>A <link linkend="GstTagList"><type>GstTagList</type></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>the index</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-nth-tag-name.returns" role="returns">
<title>Returns</title>
<para> The name of the tag at <parameter>index</parameter>
.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-add" role="function">
<title>gst_tag_list_add&#160;()</title>
<indexterm zone="gst-tag-list-add"><primary>gst_tag_list_add</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_list_add (<parameter><link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                  <parameter><link linkend="GstTagMergeMode"><type>GstTagMergeMode</type></link> mode</parameter>,
                  <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                  <parameter>...</parameter>);</programlisting>
<para>Sets the values for the given tags using the specified mode.</para>
<refsect3 id="gst-tag-list-add.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>list to set tags in</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mode</para></entry>
<entry role="parameter_description"><para>the mode to use</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>...</para></entry>
<entry role="parameter_description"><para><link linkend="NULL:CAPS"><literal>NULL</literal></link>-terminated list of values to set</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-add-value" role="function">
<title>gst_tag_list_add_value&#160;()</title>
<indexterm zone="gst-tag-list-add-value"><primary>gst_tag_list_add_value</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_list_add_value (<parameter><link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                        <parameter><link linkend="GstTagMergeMode"><type>GstTagMergeMode</type></link> mode</parameter>,
                        <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                        <parameter>const <link linkend="GValue"><type>GValue</type></link> *value</parameter>);</programlisting>
<para>Sets the GValue for a given tag using the specified mode.</para>
<refsect3 id="gst-tag-list-add-value.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>list to set tags in</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mode</para></entry>
<entry role="parameter_description"><para>the mode to use</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para>GValue for this tag</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-add-values" role="function">
<title>gst_tag_list_add_values&#160;()</title>
<indexterm zone="gst-tag-list-add-values"><primary>gst_tag_list_add_values</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_list_add_values (<parameter><link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                         <parameter><link linkend="GstTagMergeMode"><type>GstTagMergeMode</type></link> mode</parameter>,
                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                         <parameter>...</parameter>);</programlisting>
<para>Sets the GValues for the given tags using the specified mode.</para>
<refsect3 id="gst-tag-list-add-values.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>list to set tags in</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mode</para></entry>
<entry role="parameter_description"><para>the mode to use</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>...</para></entry>
<entry role="parameter_description"><para>GValues to set</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-add-valist" role="function">
<title>gst_tag_list_add_valist&#160;()</title>
<indexterm zone="gst-tag-list-add-valist"><primary>gst_tag_list_add_valist</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_list_add_valist (<parameter><link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                         <parameter><link linkend="GstTagMergeMode"><type>GstTagMergeMode</type></link> mode</parameter>,
                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                         <parameter><link linkend="va-list"><type>va_list</type></link> var_args</parameter>);</programlisting>
<para>Sets the values for the given tags using the specified mode.</para>
<refsect3 id="gst-tag-list-add-valist.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>list to set tags in</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mode</para></entry>
<entry role="parameter_description"><para>the mode to use</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>var_args</para></entry>
<entry role="parameter_description"><para>tag / value pairs to set</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-add-valist-values" role="function">
<title>gst_tag_list_add_valist_values&#160;()</title>
<indexterm zone="gst-tag-list-add-valist-values"><primary>gst_tag_list_add_valist_values</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_list_add_valist_values (<parameter><link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                                <parameter><link linkend="GstTagMergeMode"><type>GstTagMergeMode</type></link> mode</parameter>,
                                <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                                <parameter><link linkend="va-list"><type>va_list</type></link> var_args</parameter>);</programlisting>
<para>Sets the GValues for the given tags using the specified mode.</para>
<refsect3 id="gst-tag-list-add-valist-values.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>list to set tags in</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mode</para></entry>
<entry role="parameter_description"><para>the mode to use</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>var_args</para></entry>
<entry role="parameter_description"><para>tag / GValue pairs to set</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-remove-tag" role="function">
<title>gst_tag_list_remove_tag&#160;()</title>
<indexterm zone="gst-tag-list-remove-tag"><primary>gst_tag_list_remove_tag</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_list_remove_tag (<parameter><link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>);</programlisting>
<para>Removes the given tag from the taglist.</para>
<refsect3 id="gst-tag-list-remove-tag.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>list to remove tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to remove</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-foreach" role="function">
<title>gst_tag_list_foreach&#160;()</title>
<indexterm zone="gst-tag-list-foreach"><primary>gst_tag_list_foreach</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_tag_list_foreach (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                      <parameter><link linkend="GstTagForeachFunc"><type>GstTagForeachFunc</type></link> func</parameter>,
                      <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>Calls the given function for each tag inside the tag list. Note that if there
is no tag, the function won't be called at all.</para>
<refsect3 id="gst-tag-list-foreach.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>list to iterate over</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>func</para></entry>
<entry role="parameter_description"><para> function to be called for each tag. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>scope call</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para> user specified data. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>closure</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-value-index" role="function">
<title>gst_tag_list_get_value_index&#160;()</title>
<indexterm zone="gst-tag-list-get-value-index"><primary>gst_tag_list_get_value_index</primary></indexterm>
<programlisting language="C">const <link linkend="GValue"><returnvalue>GValue</returnvalue></link>&#160;*
gst_tag_list_get_value_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                              <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                              <parameter><link linkend="guint"><type>guint</type></link> index</parameter>);</programlisting>
<para>Gets the value that is at the given index for the given tag in the given
list.</para>
<refsect3 id="gst-tag-list-get-value-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-value-index.returns" role="returns">
<title>Returns</title>
<para> The GValue for the specified
entry or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the tag wasn't available or the tag
doesn't have as many entries. </para>
<para><emphasis role="annotation">[<acronym>transfer none</acronym>][<acronym>nullable</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-copy-value" role="function">
<title>gst_tag_list_copy_value&#160;()</title>
<indexterm zone="gst-tag-list-copy-value"><primary>gst_tag_list_copy_value</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_copy_value (<parameter><link linkend="GValue"><type>GValue</type></link> *dest</parameter>,
                         <parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>);</programlisting>
<para>Copies the contents for the given tag into the value,
merging multiple values into one if multiple values are associated
with the tag.
You must <link linkend="g-value-unset"><function>g_value_unset()</function></link> the value after use.</para>
<refsect3 id="gst-tag-list-copy-value.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dest</para></entry>
<entry role="parameter_description"><para> uninitialized <link linkend="GValue"><type>GValue</type></link> to copy into. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out caller-allocates</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>list to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-copy-value.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-boolean" role="function">
<title>gst_tag_list_get_boolean&#160;()</title>
<indexterm zone="gst-tag-list-get-boolean"><primary>gst_tag_list_get_boolean</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_boolean (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                          <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                          <parameter><link linkend="gboolean"><type>gboolean</type></link> *value</parameter>);</programlisting>
<para>Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.</para>
<refsect3 id="gst-tag-list-get-boolean.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-boolean.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-boolean-index" role="function">
<title>gst_tag_list_get_boolean_index&#160;()</title>
<indexterm zone="gst-tag-list-get-boolean-index"><primary>gst_tag_list_get_boolean_index</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_boolean_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                                <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                                <parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                                <parameter><link linkend="gboolean"><type>gboolean</type></link> *value</parameter>);</programlisting>
<para>Gets the value that is at the given index for the given tag in the given
list.</para>
<refsect3 id="gst-tag-list-get-boolean-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-boolean-index.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-int" role="function">
<title>gst_tag_list_get_int&#160;()</title>
<indexterm zone="gst-tag-list-get-int"><primary>gst_tag_list_get_int</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_int (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                      <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                      <parameter><link linkend="gint"><type>gint</type></link> *value</parameter>);</programlisting>
<para>Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.</para>
<refsect3 id="gst-tag-list-get-int.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-int.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-int-index" role="function">
<title>gst_tag_list_get_int_index&#160;()</title>
<indexterm zone="gst-tag-list-get-int-index"><primary>gst_tag_list_get_int_index</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_int_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                            <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                            <parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                            <parameter><link linkend="gint"><type>gint</type></link> *value</parameter>);</programlisting>
<para>Gets the value that is at the given index for the given tag in the given
list.</para>
<refsect3 id="gst-tag-list-get-int-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-int-index.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-uint" role="function">
<title>gst_tag_list_get_uint&#160;()</title>
<indexterm zone="gst-tag-list-get-uint"><primary>gst_tag_list_get_uint</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_uint (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                       <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                       <parameter><link linkend="guint"><type>guint</type></link> *value</parameter>);</programlisting>
<para>Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.</para>
<refsect3 id="gst-tag-list-get-uint.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-uint.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-uint-index" role="function">
<title>gst_tag_list_get_uint_index&#160;()</title>
<indexterm zone="gst-tag-list-get-uint-index"><primary>gst_tag_list_get_uint_index</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_uint_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                             <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                             <parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                             <parameter><link linkend="guint"><type>guint</type></link> *value</parameter>);</programlisting>
<para>Gets the value that is at the given index for the given tag in the given
list.</para>
<refsect3 id="gst-tag-list-get-uint-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-uint-index.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-int64" role="function">
<title>gst_tag_list_get_int64&#160;()</title>
<indexterm zone="gst-tag-list-get-int64"><primary>gst_tag_list_get_int64</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_int64 (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                        <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                        <parameter><link linkend="gint64"><type>gint64</type></link> *value</parameter>);</programlisting>
</refsect2>
<refsect2 id="gst-tag-list-get-int64-index" role="function">
<title>gst_tag_list_get_int64_index&#160;()</title>
<indexterm zone="gst-tag-list-get-int64-index"><primary>gst_tag_list_get_int64_index</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_int64_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                              <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                              <parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                              <parameter><link linkend="gint64"><type>gint64</type></link> *value</parameter>);</programlisting>
<para>Gets the value that is at the given index for the given tag in the given
list.</para>
<refsect3 id="gst-tag-list-get-int64-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-int64-index.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-uint64" role="function">
<title>gst_tag_list_get_uint64&#160;()</title>
<indexterm zone="gst-tag-list-get-uint64"><primary>gst_tag_list_get_uint64</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_uint64 (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                         <parameter><link linkend="guint64"><type>guint64</type></link> *value</parameter>);</programlisting>
<para>Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.</para>
<refsect3 id="gst-tag-list-get-uint64.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-uint64.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-uint64-index" role="function">
<title>gst_tag_list_get_uint64_index&#160;()</title>
<indexterm zone="gst-tag-list-get-uint64-index"><primary>gst_tag_list_get_uint64_index</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_uint64_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                               <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                               <parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                               <parameter><link linkend="guint64"><type>guint64</type></link> *value</parameter>);</programlisting>
<para>Gets the value that is at the given index for the given tag in the given
list.</para>
<refsect3 id="gst-tag-list-get-uint64-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-uint64-index.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-float" role="function">
<title>gst_tag_list_get_float&#160;()</title>
<indexterm zone="gst-tag-list-get-float"><primary>gst_tag_list_get_float</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_float (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                        <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                        <parameter><link linkend="gfloat"><type>gfloat</type></link> *value</parameter>);</programlisting>
<para>Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.</para>
<refsect3 id="gst-tag-list-get-float.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-float.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-float-index" role="function">
<title>gst_tag_list_get_float_index&#160;()</title>
<indexterm zone="gst-tag-list-get-float-index"><primary>gst_tag_list_get_float_index</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_float_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                              <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                              <parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                              <parameter><link linkend="gfloat"><type>gfloat</type></link> *value</parameter>);</programlisting>
<para>Gets the value that is at the given index for the given tag in the given
list.</para>
<refsect3 id="gst-tag-list-get-float-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-float-index.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-double" role="function">
<title>gst_tag_list_get_double&#160;()</title>
<indexterm zone="gst-tag-list-get-double"><primary>gst_tag_list_get_double</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_double (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                         <parameter><link linkend="gdouble"><type>gdouble</type></link> *value</parameter>);</programlisting>
<para>Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.</para>
<refsect3 id="gst-tag-list-get-double.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-double.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-double-index" role="function">
<title>gst_tag_list_get_double_index&#160;()</title>
<indexterm zone="gst-tag-list-get-double-index"><primary>gst_tag_list_get_double_index</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_double_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                               <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                               <parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                               <parameter><link linkend="gdouble"><type>gdouble</type></link> *value</parameter>);</programlisting>
<para>Gets the value that is at the given index for the given tag in the given
list.</para>
<refsect3 id="gst-tag-list-get-double-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-double-index.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-string" role="function">
<title>gst_tag_list_get_string&#160;()</title>
<indexterm zone="gst-tag-list-get-string"><primary>gst_tag_list_get_string</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_string (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                         <parameter><link linkend="gchar"><type>gchar</type></link> **value</parameter>);</programlisting>
<para>Copies the contents for the given tag into the value, possibly merging
multiple values into one if multiple values are associated with the tag.</para>
<para>Use gst_tag_list_get_string_index (list, tag, 0, value) if you want
to retrieve the first string associated with this tag unmodified.</para>
<para>The resulting string in <parameter>value</parameter>
 will be in UTF-8 encoding and should be
freed by the caller using g_free when no longer needed. The
returned string is also guaranteed to be non-<link linkend="NULL:CAPS"><literal>NULL</literal></link> and non-empty.</para>
<para>Free-function: g_free</para>
<refsect3 id="gst-tag-list-get-string.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out callee-allocates</acronym>][<acronym>transfer full</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-string.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-string-index" role="function">
<title>gst_tag_list_get_string_index&#160;()</title>
<indexterm zone="gst-tag-list-get-string-index"><primary>gst_tag_list_get_string_index</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_string_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                               <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                               <parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                               <parameter><link linkend="gchar"><type>gchar</type></link> **value</parameter>);</programlisting>
<para>Gets the value that is at the given index for the given tag in the given
list.</para>
<para>The resulting string in <parameter>value</parameter>
 will be in UTF-8 encoding and should be
freed by the caller using g_free when no longer needed. The
returned string is also guaranteed to be non-<link linkend="NULL:CAPS"><literal>NULL</literal></link> and non-empty.</para>
<para>Free-function: g_free</para>
<refsect3 id="gst-tag-list-get-string-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out callee-allocates</acronym>][<acronym>transfer full</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-string-index.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-peek-string-index" role="function">
<title>gst_tag_list_peek_string_index&#160;()</title>
<indexterm zone="gst-tag-list-peek-string-index"><primary>gst_tag_list_peek_string_index</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_peek_string_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                                <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                                <parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                                <parameter>const <link linkend="gchar"><type>gchar</type></link> **value</parameter>);</programlisting>
<para>Peeks at the value that is at the given index for the given tag in the given
list.</para>
<para>The resulting string in <parameter>value</parameter>
 will be in UTF-8 encoding and doesn't need
to be freed by the caller. The returned string is also guaranteed to
be non-<link linkend="NULL:CAPS"><literal>NULL</literal></link> and non-empty.</para>
<refsect3 id="gst-tag-list-peek-string-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>transfer none</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-peek-string-index.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was set, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-pointer" role="function">
<title>gst_tag_list_get_pointer&#160;()</title>
<indexterm zone="gst-tag-list-get-pointer"><primary>gst_tag_list_get_pointer</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_pointer (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                          <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                          <parameter><link linkend="gpointer"><type>gpointer</type></link> *value</parameter>);</programlisting>
<para>Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.</para>
<refsect3 id="gst-tag-list-get-pointer.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>transfer none</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-pointer.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-pointer-index" role="function">
<title>gst_tag_list_get_pointer_index&#160;()</title>
<indexterm zone="gst-tag-list-get-pointer-index"><primary>gst_tag_list_get_pointer_index</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_pointer_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                                <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                                <parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                                <parameter><link linkend="gpointer"><type>gpointer</type></link> *value</parameter>);</programlisting>
<para>Gets the value that is at the given index for the given tag in the given
list.</para>
<refsect3 id="gst-tag-list-get-pointer-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out</acronym>][<acronym>transfer none</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-pointer-index.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-date" role="function">
<title>gst_tag_list_get_date&#160;()</title>
<indexterm zone="gst-tag-list-get-date"><primary>gst_tag_list_get_date</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_date (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                       <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                       <parameter><link linkend="GDate"><type>GDate</type></link> **value</parameter>);</programlisting>
<para>Copies the first date for the given tag in the taglist into the variable
pointed to by <parameter>value</parameter>
. Free the date with <link linkend="g-date-free"><function>g_date_free()</function></link> when it is no longer
needed.</para>
<para>Free-function: g_date_free</para>
<refsect3 id="gst-tag-list-get-date.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> address of a GDate pointer
variable to store the result into. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out callee-allocates</acronym>][<acronym>transfer full</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-date.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a date was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list or if it was <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-date-index" role="function">
<title>gst_tag_list_get_date_index&#160;()</title>
<indexterm zone="gst-tag-list-get-date-index"><primary>gst_tag_list_get_date_index</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_date_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                             <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                             <parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                             <parameter><link linkend="GDate"><type>GDate</type></link> **value</parameter>);</programlisting>
<para>Gets the date that is at the given index for the given tag in the given
list and copies it into the variable pointed to by <parameter>value</parameter>
. Free the date
with <link linkend="g-date-free"><function>g_date_free()</function></link> when it is no longer needed.</para>
<para>Free-function: g_date_free</para>
<refsect3 id="gst-tag-list-get-date-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out callee-allocates</acronym>][<acronym>transfer full</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-date-index.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list or if it was <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-date-time" role="function">
<title>gst_tag_list_get_date_time&#160;()</title>
<indexterm zone="gst-tag-list-get-date-time"><primary>gst_tag_list_get_date_time</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_date_time (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                            <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                            <parameter><link linkend="GstDateTime"><type>GstDateTime</type></link> **value</parameter>);</programlisting>
<para>Copies the first datetime for the given tag in the taglist into the variable
pointed to by <parameter>value</parameter>
. Unref the date with <link linkend="gst-date-time-unref"><function>gst_date_time_unref()</function></link> when
it is no longer needed.</para>
<para>Free-function: gst_date_time_unref</para>
<refsect3 id="gst-tag-list-get-date-time.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> address of a <link linkend="GstDateTime"><type>GstDateTime</type></link>
pointer variable to store the result into. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out callee-allocates</acronym>][<acronym>transfer full</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-date-time.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a datetime was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in
the given list or if it was <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-date-time-index" role="function">
<title>gst_tag_list_get_date_time_index&#160;()</title>
<indexterm zone="gst-tag-list-get-date-time-index"><primary>gst_tag_list_get_date_time_index</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_date_time_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                                  <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                                  <parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                                  <parameter><link linkend="GstDateTime"><type>GstDateTime</type></link> **value</parameter>);</programlisting>
<para>Gets the datetime that is at the given index for the given tag in the given
list and copies it into the variable pointed to by <parameter>value</parameter>
. Unref the datetime
with <link linkend="gst-date-time-unref"><function>gst_date_time_unref()</function></link> when it is no longer needed.</para>
<para>Free-function: gst_date_time_unref</para>
<refsect3 id="gst-tag-list-get-date-time-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>value</para></entry>
<entry role="parameter_description"><para> location for the result. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out callee-allocates</acronym>][<acronym>transfer full</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-date-time-index.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a value was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list or if it was <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-sample" role="function">
<title>gst_tag_list_get_sample&#160;()</title>
<indexterm zone="gst-tag-list-get-sample"><primary>gst_tag_list_get_sample</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_sample (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                         <parameter><link linkend="GstSample"><type>GstSample</type></link> **sample</parameter>);</programlisting>
<para>Copies the first sample for the given tag in the taglist into the variable
pointed to by <parameter>sample</parameter>
. Free the sample with <link linkend="gst-sample-unref"><function>gst_sample_unref()</function></link> when it is
no longer needed. You can retrieve the buffer from the sample using
<link linkend="gst-sample-get-buffer"><function>gst_sample_get_buffer()</function></link> and the associated caps (if any) with
<link linkend="gst-sample-get-caps"><function>gst_sample_get_caps()</function></link>.</para>
<para>Free-function: gst_sample_unref</para>
<refsect3 id="gst-tag-list-get-sample.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>sample</para></entry>
<entry role="parameter_description"><para> address of a GstSample
pointer variable to store the result into. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out callee-allocates</acronym>][<acronym>transfer full</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-sample.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a sample was returned, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in
the given list or if it was <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
</refsect3></refsect2>
<refsect2 id="gst-tag-list-get-sample-index" role="function">
<title>gst_tag_list_get_sample_index&#160;()</title>
<indexterm zone="gst-tag-list-get-sample-index"><primary>gst_tag_list_get_sample_index</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
gst_tag_list_get_sample_index (<parameter>const <link linkend="GstTagList"><type>GstTagList</type></link> *list</parameter>,
                               <parameter>const <link linkend="gchar"><type>gchar</type></link> *tag</parameter>,
                               <parameter><link linkend="guint"><type>guint</type></link> index</parameter>,
                               <parameter><link linkend="GstSample"><type>GstSample</type></link> **sample</parameter>);</programlisting>
<para>Gets the sample that is at the given index for the given tag in the given
list and copies it into the variable pointed to by <parameter>sample</parameter>
. Free the sample
with <link linkend="gst-sample-unref"><function>gst_sample_unref()</function></link> when it is no longer needed. You can retrieve the
buffer from the sample using <link linkend="gst-sample-get-buffer"><function>gst_sample_get_buffer()</function></link> and the associated
caps (if any) with <link linkend="gst-sample-get-caps"><function>gst_sample_get_caps()</function></link>.</para>
<para>Free-function: gst_sample_unref</para>
<refsect3 id="gst-tag-list-get-sample-index.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstTagList"><type>GstTagList</type></link> to get the tag from</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tag</para></entry>
<entry role="parameter_description"><para>tag to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>index</para></entry>
<entry role="parameter_description"><para>number of entry to read out</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>sample</para></entry>
<entry role="parameter_description"><para> address of a GstSample
pointer variable to store the result into. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>out callee-allocates</acronym>][<acronym>transfer full</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-tag-list-get-sample-index.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, if a sample was copied, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the tag didn't exist in the
given list or if it was <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</para>
</refsect3></refsect2>

</refsect1>
<refsect1 id="GstTagList.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="GstTagList-struct" role="struct">
<title>struct GstTagList</title>
<indexterm zone="GstTagList-struct"><primary>GstTagList</primary></indexterm>
<programlisting language="C">struct GstTagList {
  GstMiniObject mini_object;
};
</programlisting>
<para>Object describing tags / metadata.</para>
<refsect3 id="GstTagList.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><link linkend="GstMiniObject"><type>GstMiniObject</type></link>&#160;<structfield id="GstTagList-struct.mini-object">mini_object</structfield>;</para></entry>
<entry role="struct_member_description"><para>the parent type</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="GstTagMergeMode" role="enum">
<title>enum GstTagMergeMode</title>
<indexterm zone="GstTagMergeMode"><primary>GstTagMergeMode</primary></indexterm>
<para>The different tag merging modes are basically replace, overwrite and append,
but they can be seen from two directions. Given two taglists: (A) the tags
already in the element and (B) the ones that are supplied to the element (
e.g. via <link linkend="gst-tag-setter-merge-tags"><function>gst_tag_setter_merge_tags()</function></link> / <link linkend="gst-tag-setter-add-tags"><function>gst_tag_setter_add_tags()</function></link> or a
<link linkend="GST-EVENT-TAG:CAPS"><literal>GST_EVENT_TAG</literal></link>), how are these tags merged?
In the table below this is shown for the cases that a tag exists in the list
(A) or does not exists (!A) and combinations thereof.</para>
<table frame="all" colsep="1" rowsep="1">
  <title>merge mode</title>
  <tgroup cols='5' align='left'>
    <thead>
      <row>
        <entry>merge mode</entry>
        <entry>A + B</entry>
        <entry>A + !B</entry>
        <entry>!A + B</entry>
        <entry>!A + !B</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>REPLACE_ALL</entry>
        <entry>B</entry>
        <entry>-</entry>
        <entry>B</entry>
        <entry>-</entry>
      </row>
      <row>
        <entry>REPLACE</entry>
        <entry>B</entry>
        <entry>A</entry>
        <entry>B</entry>
        <entry>-</entry>
      </row>
      <row>
        <entry>APPEND</entry>
        <entry>A, B</entry>
        <entry>A</entry>
        <entry>B</entry>
        <entry>-</entry>
      </row>
      <row>
        <entry>PREPEND</entry>
        <entry>B, A</entry>
        <entry>A</entry>
        <entry>B</entry>
        <entry>-</entry>
      </row>
      <row>
        <entry>KEEP</entry>
        <entry>A</entry>
        <entry>A</entry>
        <entry>B</entry>
        <entry>-</entry>
      </row>
      <row>
        <entry>KEEP_ALL</entry>
        <entry>A</entry>
        <entry>A</entry>
        <entry>-</entry>
        <entry>-</entry>
      </row>
    </tbody>
  </tgroup>
</table>
<refsect3 id="GstTagMergeMode.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-MERGE-UNDEFINED:CAPS">GST_TAG_MERGE_UNDEFINED</para></entry>
<entry role="enum_member_description"><para>undefined merge mode</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-MERGE-REPLACE-ALL:CAPS">GST_TAG_MERGE_REPLACE_ALL</para></entry>
<entry role="enum_member_description"><para>replace all tags (clear list and append)</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-MERGE-REPLACE:CAPS">GST_TAG_MERGE_REPLACE</para></entry>
<entry role="enum_member_description"><para>replace tags</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-MERGE-APPEND:CAPS">GST_TAG_MERGE_APPEND</para></entry>
<entry role="enum_member_description"><para>append tags</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-MERGE-PREPEND:CAPS">GST_TAG_MERGE_PREPEND</para></entry>
<entry role="enum_member_description"><para>prepend tags</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-MERGE-KEEP:CAPS">GST_TAG_MERGE_KEEP</para></entry>
<entry role="enum_member_description"><para>keep existing tags</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-MERGE-KEEP-ALL:CAPS">GST_TAG_MERGE_KEEP_ALL</para></entry>
<entry role="enum_member_description"><para>keep all existing tags</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-MERGE-COUNT:CAPS">GST_TAG_MERGE_COUNT</para></entry>
<entry role="enum_member_description"><para>the number of merge modes</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GstTagFlag" role="enum">
<title>enum GstTagFlag</title>
<indexterm zone="GstTagFlag"><primary>GstTagFlag</primary></indexterm>
<para>Extra tag flags used when registering tags.</para>
<refsect3 id="GstTagFlag.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-FLAG-UNDEFINED:CAPS">GST_TAG_FLAG_UNDEFINED</para></entry>
<entry role="enum_member_description"><para>undefined flag</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-FLAG-META:CAPS">GST_TAG_FLAG_META</para></entry>
<entry role="enum_member_description"><para>tag is meta data</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-FLAG-ENCODED:CAPS">GST_TAG_FLAG_ENCODED</para></entry>
<entry role="enum_member_description"><para>tag is encoded</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-FLAG-DECODED:CAPS">GST_TAG_FLAG_DECODED</para></entry>
<entry role="enum_member_description"><para>tag is decoded</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-FLAG-COUNT:CAPS">GST_TAG_FLAG_COUNT</para></entry>
<entry role="enum_member_description"><para>number of tag flags</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GstTagScope" role="enum">
<title>enum GstTagScope</title>
<indexterm zone="GstTagScope"><primary>GstTagScope</primary></indexterm>
<para>GstTagScope specifies if a taglist applies to the complete
medium or only to one single stream.</para>
<refsect3 id="GstTagScope.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-SCOPE-STREAM:CAPS">GST_TAG_SCOPE_STREAM</para></entry>
<entry role="enum_member_description"><para>tags specific to this single stream</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-TAG-SCOPE-GLOBAL:CAPS">GST_TAG_SCOPE_GLOBAL</para></entry>
<entry role="enum_member_description"><para>global tags for the complete medium</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GST-TAG-TITLE:CAPS" role="macro">
<title>GST_TAG_TITLE</title>
<indexterm zone="GST-TAG-TITLE:CAPS"><primary>GST_TAG_TITLE</primary></indexterm>
<programlisting language="C">#define GST_TAG_TITLE                  "title"
</programlisting>
<para>commonly used title (string)</para>
<para>The title as it should be displayed, e.g. 'The Doll House'</para>
</refsect2>
<refsect2 id="GST-TAG-TITLE-SORTNAME:CAPS" role="macro">
<title>GST_TAG_TITLE_SORTNAME</title>
<indexterm zone="GST-TAG-TITLE-SORTNAME:CAPS"><primary>GST_TAG_TITLE_SORTNAME</primary></indexterm>
<programlisting language="C">#define GST_TAG_TITLE_SORTNAME         "title-sortname"
</programlisting>
<para>commonly used title, as used for sorting (string)</para>
<para>The title as it should be sorted, e.g. 'Doll House, The'</para>
</refsect2>
<refsect2 id="GST-TAG-ARTIST:CAPS" role="macro">
<title>GST_TAG_ARTIST</title>
<indexterm zone="GST-TAG-ARTIST:CAPS"><primary>GST_TAG_ARTIST</primary></indexterm>
<programlisting language="C">#define GST_TAG_ARTIST                 "artist"
</programlisting>
<para>person(s) responsible for the recording (string)</para>
<para>The artist name as it should be displayed, e.g. 'Jimi Hendrix' or
'The Guitar Heroes'</para>
</refsect2>
<refsect2 id="GST-TAG-ARTIST-SORTNAME:CAPS" role="macro">
<title>GST_TAG_ARTIST_SORTNAME</title>
<indexterm zone="GST-TAG-ARTIST-SORTNAME:CAPS"><primary>GST_TAG_ARTIST_SORTNAME</primary></indexterm>
<programlisting language="C">#define GST_TAG_ARTIST_SORTNAME        "artist-sortname"
</programlisting>
<para>person(s) responsible for the recording, as used for sorting (string)</para>
<para>The artist name as it should be sorted, e.g. 'Hendrix, Jimi' or
'Guitar Heroes, The'</para>
</refsect2>
<refsect2 id="GST-TAG-ALBUM:CAPS" role="macro">
<title>GST_TAG_ALBUM</title>
<indexterm zone="GST-TAG-ALBUM:CAPS"><primary>GST_TAG_ALBUM</primary></indexterm>
<programlisting language="C">#define GST_TAG_ALBUM                  "album"
</programlisting>
<para>album containing this data (string)</para>
<para>The album name as it should be displayed, e.g. 'The Jazz Guitar'</para>
</refsect2>
<refsect2 id="GST-TAG-ALBUM-SORTNAME:CAPS" role="macro">
<title>GST_TAG_ALBUM_SORTNAME</title>
<indexterm zone="GST-TAG-ALBUM-SORTNAME:CAPS"><primary>GST_TAG_ALBUM_SORTNAME</primary></indexterm>
<programlisting language="C">#define GST_TAG_ALBUM_SORTNAME         "album-sortname"
</programlisting>
<para>album containing this data, as used for sorting (string)</para>
<para>The album name as it should be sorted, e.g. 'Jazz Guitar, The'</para>
</refsect2>
<refsect2 id="GST-TAG-ALBUM-ARTIST:CAPS" role="macro">
<title>GST_TAG_ALBUM_ARTIST</title>
<indexterm zone="GST-TAG-ALBUM-ARTIST:CAPS"><primary>GST_TAG_ALBUM_ARTIST</primary></indexterm>
<programlisting language="C">#define GST_TAG_ALBUM_ARTIST           "album-artist"
</programlisting>
<para>The artist of the entire album, as it should be displayed.</para>
</refsect2>
<refsect2 id="GST-TAG-ALBUM-ARTIST-SORTNAME:CAPS" role="macro">
<title>GST_TAG_ALBUM_ARTIST_SORTNAME</title>
<indexterm zone="GST-TAG-ALBUM-ARTIST-SORTNAME:CAPS"><primary>GST_TAG_ALBUM_ARTIST_SORTNAME</primary></indexterm>
<programlisting language="C">#define GST_TAG_ALBUM_ARTIST_SORTNAME  "album-artist-sortname"
</programlisting>
<para>The artist of the entire album, as it should be sorted.</para>
</refsect2>
<refsect2 id="GST-TAG-DATE:CAPS" role="macro">
<title>GST_TAG_DATE</title>
<indexterm zone="GST-TAG-DATE:CAPS"><primary>GST_TAG_DATE</primary></indexterm>
<programlisting language="C">#define GST_TAG_DATE                   "date"
</programlisting>
<para>date the data was created (<link linkend="GDate"><type>GDate</type></link> structure)</para>
</refsect2>
<refsect2 id="GST-TAG-DATE-TIME:CAPS" role="macro">
<title>GST_TAG_DATE_TIME</title>
<indexterm zone="GST-TAG-DATE-TIME:CAPS"><primary>GST_TAG_DATE_TIME</primary></indexterm>
<programlisting language="C">#define GST_TAG_DATE_TIME              "datetime"
</programlisting>
<para>date and time the data was created (<link linkend="GstDateTime"><type>GstDateTime</type></link> structure)</para>
</refsect2>
<refsect2 id="GST-TAG-GENRE:CAPS" role="macro">
<title>GST_TAG_GENRE</title>
<indexterm zone="GST-TAG-GENRE:CAPS"><primary>GST_TAG_GENRE</primary></indexterm>
<programlisting language="C">#define GST_TAG_GENRE                  "genre"
</programlisting>
<para>genre this data belongs to (string)</para>
</refsect2>
<refsect2 id="GST-TAG-COMMENT:CAPS" role="macro">
<title>GST_TAG_COMMENT</title>
<indexterm zone="GST-TAG-COMMENT:CAPS"><primary>GST_TAG_COMMENT</primary></indexterm>
<programlisting language="C">#define GST_TAG_COMMENT                "comment"
</programlisting>
<para>free text commenting the data (string)</para>
</refsect2>
<refsect2 id="GST-TAG-EXTENDED-COMMENT:CAPS" role="macro">
<title>GST_TAG_EXTENDED_COMMENT</title>
<indexterm zone="GST-TAG-EXTENDED-COMMENT:CAPS"><primary>GST_TAG_EXTENDED_COMMENT</primary></indexterm>
<programlisting language="C">#define GST_TAG_EXTENDED_COMMENT       "extended-comment"
</programlisting>
<para>key/value text commenting the data (string)</para>
<para>Must be in the form of 'key=comment' or
'key[lc]=comment' where 'lc' is an ISO-639
language code.</para>
<para>This tag is used for unknown Vorbis comment tags,
unknown APE tags and certain ID3v2 comment fields.</para>
</refsect2>
<refsect2 id="GST-TAG-TRACK-NUMBER:CAPS" role="macro">
<title>GST_TAG_TRACK_NUMBER</title>
<indexterm zone="GST-TAG-TRACK-NUMBER:CAPS"><primary>GST_TAG_TRACK_NUMBER</primary></indexterm>
<programlisting language="C">#define GST_TAG_TRACK_NUMBER           "track-number"
</programlisting>
<para>track number inside a collection (unsigned integer)</para>
</refsect2>
<refsect2 id="GST-TAG-TRACK-COUNT:CAPS" role="macro">
<title>GST_TAG_TRACK_COUNT</title>
<indexterm zone="GST-TAG-TRACK-COUNT:CAPS"><primary>GST_TAG_TRACK_COUNT</primary></indexterm>
<programlisting language="C">#define GST_TAG_TRACK_COUNT            "track-count"
</programlisting>
<para>count of tracks inside collection this track belongs to (unsigned integer)</para>
</refsect2>
<refsect2 id="GST-TAG-ALBUM-VOLUME-NUMBER:CAPS" role="macro">
<title>GST_TAG_ALBUM_VOLUME_NUMBER</title>
<indexterm zone="GST-TAG-ALBUM-VOLUME-NUMBER:CAPS"><primary>GST_TAG_ALBUM_VOLUME_NUMBER</primary></indexterm>
<programlisting language="C">#define GST_TAG_ALBUM_VOLUME_NUMBER    "album-disc-number"
</programlisting>
<para>disc number inside a collection (unsigned integer)</para>
</refsect2>
<refsect2 id="GST-TAG-ALBUM-VOLUME-COUNT:CAPS" role="macro">
<title>GST_TAG_ALBUM_VOLUME_COUNT</title>
<indexterm zone="GST-TAG-ALBUM-VOLUME-COUNT:CAPS"><primary>GST_TAG_ALBUM_VOLUME_COUNT</primary></indexterm>
<programlisting language="C">#define GST_TAG_ALBUM_VOLUME_COUNT    "album-disc-count"
</programlisting>
<para>count of discs inside collection this disc belongs to (unsigned integer)</para>
</refsect2>
<refsect2 id="GST-TAG-LOCATION:CAPS" role="macro">
<title>GST_TAG_LOCATION</title>
<indexterm zone="GST-TAG-LOCATION:CAPS"><primary>GST_TAG_LOCATION</primary></indexterm>
<programlisting language="C">#define GST_TAG_LOCATION               "location"
</programlisting>
<para>Origin of media as a URI (location, where the original of the file or stream
is hosted) (string)</para>
</refsect2>
<refsect2 id="GST-TAG-HOMEPAGE:CAPS" role="macro">
<title>GST_TAG_HOMEPAGE</title>
<indexterm zone="GST-TAG-HOMEPAGE:CAPS"><primary>GST_TAG_HOMEPAGE</primary></indexterm>
<programlisting language="C">#define GST_TAG_HOMEPAGE               "homepage"
</programlisting>
<para>Homepage for this media (i.e. artist or movie homepage) (string)</para>
</refsect2>
<refsect2 id="GST-TAG-DESCRIPTION:CAPS" role="macro">
<title>GST_TAG_DESCRIPTION</title>
<indexterm zone="GST-TAG-DESCRIPTION:CAPS"><primary>GST_TAG_DESCRIPTION</primary></indexterm>
<programlisting language="C">#define GST_TAG_DESCRIPTION            "description"
</programlisting>
<para>short text describing the content of the data (string)</para>
</refsect2>
<refsect2 id="GST-TAG-VERSION:CAPS" role="macro">
<title>GST_TAG_VERSION</title>
<indexterm zone="GST-TAG-VERSION:CAPS"><primary>GST_TAG_VERSION</primary></indexterm>
<programlisting language="C">#define GST_TAG_VERSION                "version"
</programlisting>
<para>version of this data (string)</para>
</refsect2>
<refsect2 id="GST-TAG-ISRC:CAPS" role="macro">
<title>GST_TAG_ISRC</title>
<indexterm zone="GST-TAG-ISRC:CAPS"><primary>GST_TAG_ISRC</primary></indexterm>
<programlisting language="C">#define GST_TAG_ISRC                   "isrc"
</programlisting>
<para>International Standard Recording Code - see http://www.ifpi.org/isrc/ (string)</para>
</refsect2>
<refsect2 id="GST-TAG-ORGANIZATION:CAPS" role="macro">
<title>GST_TAG_ORGANIZATION</title>
<indexterm zone="GST-TAG-ORGANIZATION:CAPS"><primary>GST_TAG_ORGANIZATION</primary></indexterm>
<programlisting language="C">#define GST_TAG_ORGANIZATION           "organization"
</programlisting>
<para>organization (string)</para>
</refsect2>
<refsect2 id="GST-TAG-COPYRIGHT:CAPS" role="macro">
<title>GST_TAG_COPYRIGHT</title>
<indexterm zone="GST-TAG-COPYRIGHT:CAPS"><primary>GST_TAG_COPYRIGHT</primary></indexterm>
<programlisting language="C">#define GST_TAG_COPYRIGHT              "copyright"
</programlisting>
<para>copyright notice of the data (string)</para>
</refsect2>
<refsect2 id="GST-TAG-COPYRIGHT-URI:CAPS" role="macro">
<title>GST_TAG_COPYRIGHT_URI</title>
<indexterm zone="GST-TAG-COPYRIGHT-URI:CAPS"><primary>GST_TAG_COPYRIGHT_URI</primary></indexterm>
<programlisting language="C">#define GST_TAG_COPYRIGHT_URI          "copyright-uri"
</programlisting>
<para>URI to location where copyright details can be found (string)</para>
</refsect2>
<refsect2 id="GST-TAG-ENCODED-BY:CAPS" role="macro">
<title>GST_TAG_ENCODED_BY</title>
<indexterm zone="GST-TAG-ENCODED-BY:CAPS"><primary>GST_TAG_ENCODED_BY</primary></indexterm>
<programlisting language="C">#define GST_TAG_ENCODED_BY             "encoded-by"
</programlisting>
<para>name of the person or organisation that encoded the file. May contain a
copyright message if the person or organisation also holds the copyright
(string)</para>
<para>Note: do not use this field to describe the encoding application. Use
<link linkend="GST-TAG-APPLICATION-NAME:CAPS"><type>GST_TAG_APPLICATION_NAME</type></link> or <link linkend="GST-TAG-COMMENT:CAPS"><type>GST_TAG_COMMENT</type></link> for that.</para>
</refsect2>
<refsect2 id="GST-TAG-COMPOSER:CAPS" role="macro">
<title>GST_TAG_COMPOSER</title>
<indexterm zone="GST-TAG-COMPOSER:CAPS"><primary>GST_TAG_COMPOSER</primary></indexterm>
<programlisting language="C">#define GST_TAG_COMPOSER               "composer"
</programlisting>
<para>person(s) who composed the recording (string)</para>
</refsect2>
<refsect2 id="GST-TAG-CONTACT:CAPS" role="macro">
<title>GST_TAG_CONTACT</title>
<indexterm zone="GST-TAG-CONTACT:CAPS"><primary>GST_TAG_CONTACT</primary></indexterm>
<programlisting language="C">#define GST_TAG_CONTACT                "contact"
</programlisting>
<para>contact information (string)</para>
</refsect2>
<refsect2 id="GST-TAG-LICENSE:CAPS" role="macro">
<title>GST_TAG_LICENSE</title>
<indexterm zone="GST-TAG-LICENSE:CAPS"><primary>GST_TAG_LICENSE</primary></indexterm>
<programlisting language="C">#define GST_TAG_LICENSE                "license"
</programlisting>
<para>license of data (string)</para>
</refsect2>
<refsect2 id="GST-TAG-LICENSE-URI:CAPS" role="macro">
<title>GST_TAG_LICENSE_URI</title>
<indexterm zone="GST-TAG-LICENSE-URI:CAPS"><primary>GST_TAG_LICENSE_URI</primary></indexterm>
<programlisting language="C">#define GST_TAG_LICENSE_URI            "license-uri"
</programlisting>
<para>URI to location where license details can be found (string)</para>
</refsect2>
<refsect2 id="GST-TAG-PERFORMER:CAPS" role="macro">
<title>GST_TAG_PERFORMER</title>
<indexterm zone="GST-TAG-PERFORMER:CAPS"><primary>GST_TAG_PERFORMER</primary></indexterm>
<programlisting language="C">#define GST_TAG_PERFORMER              "performer"
</programlisting>
<para>person(s) performing (string)</para>
</refsect2>
<refsect2 id="GST-TAG-DURATION:CAPS" role="macro">
<title>GST_TAG_DURATION</title>
<indexterm zone="GST-TAG-DURATION:CAPS"><primary>GST_TAG_DURATION</primary></indexterm>
<programlisting language="C">#define GST_TAG_DURATION               "duration"
</programlisting>
<para>length in GStreamer time units (nanoseconds) (unsigned 64-bit integer)</para>
</refsect2>
<refsect2 id="GST-TAG-CODEC:CAPS" role="macro">
<title>GST_TAG_CODEC</title>
<indexterm zone="GST-TAG-CODEC:CAPS"><primary>GST_TAG_CODEC</primary></indexterm>
<programlisting language="C">#define GST_TAG_CODEC                  "codec"
</programlisting>
<para>codec the data is stored in (string)</para>
</refsect2>
<refsect2 id="GST-TAG-VIDEO-CODEC:CAPS" role="macro">
<title>GST_TAG_VIDEO_CODEC</title>
<indexterm zone="GST-TAG-VIDEO-CODEC:CAPS"><primary>GST_TAG_VIDEO_CODEC</primary></indexterm>
<programlisting language="C">#define GST_TAG_VIDEO_CODEC            "video-codec"
</programlisting>
<para>codec the video data is stored in (string)</para>
</refsect2>
<refsect2 id="GST-TAG-AUDIO-CODEC:CAPS" role="macro">
<title>GST_TAG_AUDIO_CODEC</title>
<indexterm zone="GST-TAG-AUDIO-CODEC:CAPS"><primary>GST_TAG_AUDIO_CODEC</primary></indexterm>
<programlisting language="C">#define GST_TAG_AUDIO_CODEC            "audio-codec"
</programlisting>
<para>codec the audio data is stored in (string)</para>
</refsect2>
<refsect2 id="GST-TAG-SUBTITLE-CODEC:CAPS" role="macro">
<title>GST_TAG_SUBTITLE_CODEC</title>
<indexterm zone="GST-TAG-SUBTITLE-CODEC:CAPS"><primary>GST_TAG_SUBTITLE_CODEC</primary></indexterm>
<programlisting language="C">#define GST_TAG_SUBTITLE_CODEC         "subtitle-codec"
</programlisting>
<para>codec/format the subtitle data is stored in (string)</para>
</refsect2>
<refsect2 id="GST-TAG-CONTAINER-FORMAT:CAPS" role="macro">
<title>GST_TAG_CONTAINER_FORMAT</title>
<indexterm zone="GST-TAG-CONTAINER-FORMAT:CAPS"><primary>GST_TAG_CONTAINER_FORMAT</primary></indexterm>
<programlisting language="C">#define GST_TAG_CONTAINER_FORMAT       "container-format"
</programlisting>
<para>container format the data is stored in (string)</para>
</refsect2>
<refsect2 id="GST-TAG-BITRATE:CAPS" role="macro">
<title>GST_TAG_BITRATE</title>
<indexterm zone="GST-TAG-BITRATE:CAPS"><primary>GST_TAG_BITRATE</primary></indexterm>
<programlisting language="C">#define GST_TAG_BITRATE                "bitrate"
</programlisting>
<para>exact or average bitrate in bits/s (unsigned integer)</para>
</refsect2>
<refsect2 id="GST-TAG-NOMINAL-BITRATE:CAPS" role="macro">
<title>GST_TAG_NOMINAL_BITRATE</title>
<indexterm zone="GST-TAG-NOMINAL-BITRATE:CAPS"><primary>GST_TAG_NOMINAL_BITRATE</primary></indexterm>
<programlisting language="C">#define GST_TAG_NOMINAL_BITRATE        "nominal-bitrate"
</programlisting>
<para>nominal bitrate in bits/s (unsigned integer). The actual bitrate might be
different from this target bitrate.</para>
</refsect2>
<refsect2 id="GST-TAG-MINIMUM-BITRATE:CAPS" role="macro">
<title>GST_TAG_MINIMUM_BITRATE</title>
<indexterm zone="GST-TAG-MINIMUM-BITRATE:CAPS"><primary>GST_TAG_MINIMUM_BITRATE</primary></indexterm>
<programlisting language="C">#define GST_TAG_MINIMUM_BITRATE        "minimum-bitrate"
</programlisting>
<para>minimum bitrate in bits/s (unsigned integer)</para>
</refsect2>
<refsect2 id="GST-TAG-MAXIMUM-BITRATE:CAPS" role="macro">
<title>GST_TAG_MAXIMUM_BITRATE</title>
<indexterm zone="GST-TAG-MAXIMUM-BITRATE:CAPS"><primary>GST_TAG_MAXIMUM_BITRATE</primary></indexterm>
<programlisting language="C">#define GST_TAG_MAXIMUM_BITRATE        "maximum-bitrate"
</programlisting>
<para>maximum bitrate in bits/s (unsigned integer)</para>
</refsect2>
<refsect2 id="GST-TAG-SERIAL:CAPS" role="macro">
<title>GST_TAG_SERIAL</title>
<indexterm zone="GST-TAG-SERIAL:CAPS"><primary>GST_TAG_SERIAL</primary></indexterm>
<programlisting language="C">#define GST_TAG_SERIAL                 "serial"
</programlisting>
<para>serial number of track (unsigned integer)</para>
</refsect2>
<refsect2 id="GST-TAG-ENCODER:CAPS" role="macro">
<title>GST_TAG_ENCODER</title>
<indexterm zone="GST-TAG-ENCODER:CAPS"><primary>GST_TAG_ENCODER</primary></indexterm>
<programlisting language="C">#define GST_TAG_ENCODER                "encoder"
</programlisting>
<para>encoder used to encode this stream (string)</para>
</refsect2>
<refsect2 id="GST-TAG-ENCODER-VERSION:CAPS" role="macro">
<title>GST_TAG_ENCODER_VERSION</title>
<indexterm zone="GST-TAG-ENCODER-VERSION:CAPS"><primary>GST_TAG_ENCODER_VERSION</primary></indexterm>
<programlisting language="C">#define GST_TAG_ENCODER_VERSION        "encoder-version"
</programlisting>
<para>version of the encoder used to encode this stream (unsigned integer)</para>
</refsect2>
<refsect2 id="GST-TAG-TRACK-GAIN:CAPS" role="macro">
<title>GST_TAG_TRACK_GAIN</title>
<indexterm zone="GST-TAG-TRACK-GAIN:CAPS"><primary>GST_TAG_TRACK_GAIN</primary></indexterm>
<programlisting language="C">#define GST_TAG_TRACK_GAIN             "replaygain-track-gain"
</programlisting>
<para>track gain in db (double)</para>
</refsect2>
<refsect2 id="GST-TAG-TRACK-PEAK:CAPS" role="macro">
<title>GST_TAG_TRACK_PEAK</title>
<indexterm zone="GST-TAG-TRACK-PEAK:CAPS"><primary>GST_TAG_TRACK_PEAK</primary></indexterm>
<programlisting language="C">#define GST_TAG_TRACK_PEAK             "replaygain-track-peak"
</programlisting>
<para>peak of the track (double)</para>
</refsect2>
<refsect2 id="GST-TAG-ALBUM-GAIN:CAPS" role="macro">
<title>GST_TAG_ALBUM_GAIN</title>
<indexterm zone="GST-TAG-ALBUM-GAIN:CAPS"><primary>GST_TAG_ALBUM_GAIN</primary></indexterm>
<programlisting language="C">#define GST_TAG_ALBUM_GAIN             "replaygain-album-gain"
</programlisting>
<para>album gain in db (double)</para>
</refsect2>
<refsect2 id="GST-TAG-ALBUM-PEAK:CAPS" role="macro">
<title>GST_TAG_ALBUM_PEAK</title>
<indexterm zone="GST-TAG-ALBUM-PEAK:CAPS"><primary>GST_TAG_ALBUM_PEAK</primary></indexterm>
<programlisting language="C">#define GST_TAG_ALBUM_PEAK             "replaygain-album-peak"
</programlisting>
<para>peak of the album (double)</para>
</refsect2>
<refsect2 id="GST-TAG-REFERENCE-LEVEL:CAPS" role="macro">
<title>GST_TAG_REFERENCE_LEVEL</title>
<indexterm zone="GST-TAG-REFERENCE-LEVEL:CAPS"><primary>GST_TAG_REFERENCE_LEVEL</primary></indexterm>
<programlisting language="C">#define GST_TAG_REFERENCE_LEVEL        "replaygain-reference-level"
</programlisting>
<para>reference level of track and album gain values (double)</para>
</refsect2>
<refsect2 id="GST-TAG-LANGUAGE-CODE:CAPS" role="macro">
<title>GST_TAG_LANGUAGE_CODE</title>
<indexterm zone="GST-TAG-LANGUAGE-CODE:CAPS"><primary>GST_TAG_LANGUAGE_CODE</primary></indexterm>
<programlisting language="C">#define GST_TAG_LANGUAGE_CODE          "language-code"
</programlisting>
<para>ISO-639-2 or ISO-639-1 code for the language the content is in (string)</para>
<para>There is utility API in libgsttag in gst-plugins-base to obtain a translated
language name from the language code: <link linkend="gst-tag-get-language-name"><function>gst_tag_get_language_name()</function></link></para>
</refsect2>
<refsect2 id="GST-TAG-LANGUAGE-NAME:CAPS" role="macro">
<title>GST_TAG_LANGUAGE_NAME</title>
<indexterm zone="GST-TAG-LANGUAGE-NAME:CAPS"><primary>GST_TAG_LANGUAGE_NAME</primary></indexterm>
<programlisting language="C">#define GST_TAG_LANGUAGE_NAME          "language-name"
</programlisting>
<para>Name of the language the content is in (string)</para>
<para>Free-form name of the language the content is in, if a language code
is not available. This tag should not be set in addition to a language
code. It is undefined what language or locale the language name is in.</para>
</refsect2>
<refsect2 id="GST-TAG-IMAGE:CAPS" role="macro">
<title>GST_TAG_IMAGE</title>
<indexterm zone="GST-TAG-IMAGE:CAPS"><primary>GST_TAG_IMAGE</primary></indexterm>
<programlisting language="C">#define GST_TAG_IMAGE                  "image"
</programlisting>
<para>image (sample) (sample taglist should specify the content type and preferably
also set "image-type" field as <link linkend="GstTagImageType"><type>GstTagImageType</type></link>)</para>
</refsect2>
<refsect2 id="GST-TAG-PREVIEW-IMAGE:CAPS" role="macro">
<title>GST_TAG_PREVIEW_IMAGE</title>
<indexterm zone="GST-TAG-PREVIEW-IMAGE:CAPS"><primary>GST_TAG_PREVIEW_IMAGE</primary></indexterm>
<programlisting language="C">#define GST_TAG_PREVIEW_IMAGE          "preview-image"
</programlisting>
<para>image that is meant for preview purposes, e.g. small icon-sized version
(sample) (sample taglist should specify the content type)</para>
</refsect2>
<refsect2 id="GST-TAG-ATTACHMENT:CAPS" role="macro">
<title>GST_TAG_ATTACHMENT</title>
<indexterm zone="GST-TAG-ATTACHMENT:CAPS"><primary>GST_TAG_ATTACHMENT</primary></indexterm>
<programlisting language="C">#define GST_TAG_ATTACHMENT             "attachment"
</programlisting>
<para>generic file attachment (sample) (sample taglist should specify the content
type and if possible set "filename" to the file name of the
attachment)</para>
</refsect2>
<refsect2 id="GST-TAG-BEATS-PER-MINUTE:CAPS" role="macro">
<title>GST_TAG_BEATS_PER_MINUTE</title>
<indexterm zone="GST-TAG-BEATS-PER-MINUTE:CAPS"><primary>GST_TAG_BEATS_PER_MINUTE</primary></indexterm>
<programlisting language="C">#define GST_TAG_BEATS_PER_MINUTE       "beats-per-minute"
</programlisting>
<para>number of beats per minute in audio (double)</para>
</refsect2>
<refsect2 id="GST-TAG-KEYWORDS:CAPS" role="macro">
<title>GST_TAG_KEYWORDS</title>
<indexterm zone="GST-TAG-KEYWORDS:CAPS"><primary>GST_TAG_KEYWORDS</primary></indexterm>
<programlisting language="C">#define GST_TAG_KEYWORDS               "keywords"
</programlisting>
<para>comma separated keywords describing the content (string).</para>
</refsect2>
<refsect2 id="GST-TAG-GEO-LOCATION-NAME:CAPS" role="macro">
<title>GST_TAG_GEO_LOCATION_NAME</title>
<indexterm zone="GST-TAG-GEO-LOCATION-NAME:CAPS"><primary>GST_TAG_GEO_LOCATION_NAME</primary></indexterm>
<programlisting language="C">#define GST_TAG_GEO_LOCATION_NAME               "geo-location-name"
</programlisting>
<para>human readable descriptive location of where the media has been recorded or
produced. (string).</para>
</refsect2>
<refsect2 id="GST-TAG-GEO-LOCATION-LATITUDE:CAPS" role="macro">
<title>GST_TAG_GEO_LOCATION_LATITUDE</title>
<indexterm zone="GST-TAG-GEO-LOCATION-LATITUDE:CAPS"><primary>GST_TAG_GEO_LOCATION_LATITUDE</primary></indexterm>
<programlisting language="C">#define GST_TAG_GEO_LOCATION_LATITUDE               "geo-location-latitude"
</programlisting>
<para>geo latitude location of where the media has been recorded or produced in
degrees according to WGS84 (zero at the equator, negative values for southern
latitudes) (double).</para>
</refsect2>
<refsect2 id="GST-TAG-GEO-LOCATION-LONGITUDE:CAPS" role="macro">
<title>GST_TAG_GEO_LOCATION_LONGITUDE</title>
<indexterm zone="GST-TAG-GEO-LOCATION-LONGITUDE:CAPS"><primary>GST_TAG_GEO_LOCATION_LONGITUDE</primary></indexterm>
<programlisting language="C">#define GST_TAG_GEO_LOCATION_LONGITUDE               "geo-location-longitude"
</programlisting>
<para>geo longitude location of where the media has been recorded or produced in
degrees according to WGS84 (zero at the prime meridian in Greenwich/UK,
negative values for western longitudes). (double).</para>
</refsect2>
<refsect2 id="GST-TAG-GEO-LOCATION-ELEVATION:CAPS" role="macro">
<title>GST_TAG_GEO_LOCATION_ELEVATION</title>
<indexterm zone="GST-TAG-GEO-LOCATION-ELEVATION:CAPS"><primary>GST_TAG_GEO_LOCATION_ELEVATION</primary></indexterm>
<programlisting language="C">#define GST_TAG_GEO_LOCATION_ELEVATION               "geo-location-elevation"
</programlisting>
<para>geo elevation of where the media has been recorded or produced in meters
according to WGS84 (zero is average sea level) (double).</para>
</refsect2>
<refsect2 id="GST-TAG-GEO-LOCATION-CITY:CAPS" role="macro">
<title>GST_TAG_GEO_LOCATION_CITY</title>
<indexterm zone="GST-TAG-GEO-LOCATION-CITY:CAPS"><primary>GST_TAG_GEO_LOCATION_CITY</primary></indexterm>
<programlisting language="C">#define GST_TAG_GEO_LOCATION_CITY                    "geo-location-city"
</programlisting>
<para>The city (english name) where the media has been produced (string).</para>
</refsect2>
<refsect2 id="GST-TAG-GEO-LOCATION-COUNTRY:CAPS" role="macro">
<title>GST_TAG_GEO_LOCATION_COUNTRY</title>
<indexterm zone="GST-TAG-GEO-LOCATION-COUNTRY:CAPS"><primary>GST_TAG_GEO_LOCATION_COUNTRY</primary></indexterm>
<programlisting language="C">#define GST_TAG_GEO_LOCATION_COUNTRY                 "geo-location-country"
</programlisting>
<para>The country (english name) where the media has been produced (string).</para>
</refsect2>
<refsect2 id="GST-TAG-GEO-LOCATION-SUBLOCATION:CAPS" role="macro">
<title>GST_TAG_GEO_LOCATION_SUBLOCATION</title>
<indexterm zone="GST-TAG-GEO-LOCATION-SUBLOCATION:CAPS"><primary>GST_TAG_GEO_LOCATION_SUBLOCATION</primary></indexterm>
<programlisting language="C">#define GST_TAG_GEO_LOCATION_SUBLOCATION             "geo-location-sublocation"
</programlisting>
<para>A location 'smaller' than GST_TAG_GEO_LOCATION_CITY that specifies better
where the media has been produced. (e.g. the neighborhood) (string).</para>
<para>This tag has been added as this is how it is handled/named in XMP's
Iptc4xmpcore schema.</para>
</refsect2>
<refsect2 id="GST-TAG-GEO-LOCATION-HORIZONTAL-ERROR:CAPS" role="macro">
<title>GST_TAG_GEO_LOCATION_HORIZONTAL_ERROR</title>
<indexterm zone="GST-TAG-GEO-LOCATION-HORIZONTAL-ERROR:CAPS"><primary>GST_TAG_GEO_LOCATION_HORIZONTAL_ERROR</primary></indexterm>
<programlisting language="C">#define GST_TAG_GEO_LOCATION_HORIZONTAL_ERROR   "geo-location-horizontal-error"
</programlisting>
<para>Represents the expected error on the horizontal positioning in
meters (double).</para>
</refsect2>
<refsect2 id="GST-TAG-GEO-LOCATION-MOVEMENT-DIRECTION:CAPS" role="macro">
<title>GST_TAG_GEO_LOCATION_MOVEMENT_DIRECTION</title>
<indexterm zone="GST-TAG-GEO-LOCATION-MOVEMENT-DIRECTION:CAPS"><primary>GST_TAG_GEO_LOCATION_MOVEMENT_DIRECTION</primary></indexterm>
<programlisting language="C">#define GST_TAG_GEO_LOCATION_MOVEMENT_DIRECTION "geo-location-movement-direction"
</programlisting>
<para>Indicates the movement direction of the device performing the capture
of a media. It is represented as degrees in floating point representation,
0 means the geographic north, and increases clockwise (double from 0 to 360)</para>
<para>See also <link linkend="GST-TAG-GEO-LOCATION-CAPTURE-DIRECTION:CAPS"><type>GST_TAG_GEO_LOCATION_CAPTURE_DIRECTION</type></link></para>
</refsect2>
<refsect2 id="GST-TAG-GEO-LOCATION-MOVEMENT-SPEED:CAPS" role="macro">
<title>GST_TAG_GEO_LOCATION_MOVEMENT_SPEED</title>
<indexterm zone="GST-TAG-GEO-LOCATION-MOVEMENT-SPEED:CAPS"><primary>GST_TAG_GEO_LOCATION_MOVEMENT_SPEED</primary></indexterm>
<programlisting language="C">#define GST_TAG_GEO_LOCATION_MOVEMENT_SPEED       "geo-location-movement-speed"
</programlisting>
<para>Speed of the capturing device when performing the capture.
Represented in m/s. (double)</para>
<para>See also <link linkend="GST-TAG-GEO-LOCATION-MOVEMENT-DIRECTION:CAPS"><type>GST_TAG_GEO_LOCATION_MOVEMENT_DIRECTION</type></link></para>
</refsect2>
<refsect2 id="GST-TAG-GEO-LOCATION-CAPTURE-DIRECTION:CAPS" role="macro">
<title>GST_TAG_GEO_LOCATION_CAPTURE_DIRECTION</title>
<indexterm zone="GST-TAG-GEO-LOCATION-CAPTURE-DIRECTION:CAPS"><primary>GST_TAG_GEO_LOCATION_CAPTURE_DIRECTION</primary></indexterm>
<programlisting language="C">#define GST_TAG_GEO_LOCATION_CAPTURE_DIRECTION  "geo-location-capture-direction"
</programlisting>
<para>Indicates the direction the device is pointing to when capturing
a media. It is represented as degrees in floating point representation,
0 means the geographic north, and increases clockwise (double from 0 to 360)</para>
<para>See also <link linkend="GST-TAG-GEO-LOCATION-MOVEMENT-DIRECTION:CAPS"><type>GST_TAG_GEO_LOCATION_MOVEMENT_DIRECTION</type></link></para>
</refsect2>
<refsect2 id="GST-TAG-SHOW-NAME:CAPS" role="macro">
<title>GST_TAG_SHOW_NAME</title>
<indexterm zone="GST-TAG-SHOW-NAME:CAPS"><primary>GST_TAG_SHOW_NAME</primary></indexterm>
<programlisting language="C">#define GST_TAG_SHOW_NAME                         "show-name"
</programlisting>
<para>Name of the show, used for displaying (string)</para>
</refsect2>
<refsect2 id="GST-TAG-SHOW-SORTNAME:CAPS" role="macro">
<title>GST_TAG_SHOW_SORTNAME</title>
<indexterm zone="GST-TAG-SHOW-SORTNAME:CAPS"><primary>GST_TAG_SHOW_SORTNAME</primary></indexterm>
<programlisting language="C">#define GST_TAG_SHOW_SORTNAME                     "show-sortname"
</programlisting>
<para>Name of the show, used for sorting (string)</para>
</refsect2>
<refsect2 id="GST-TAG-SHOW-EPISODE-NUMBER:CAPS" role="macro">
<title>GST_TAG_SHOW_EPISODE_NUMBER</title>
<indexterm zone="GST-TAG-SHOW-EPISODE-NUMBER:CAPS"><primary>GST_TAG_SHOW_EPISODE_NUMBER</primary></indexterm>
<programlisting language="C">#define GST_TAG_SHOW_EPISODE_NUMBER               "show-episode-number"
</programlisting>
<para>Number of the episode within a season/show (unsigned integer)</para>
</refsect2>
<refsect2 id="GST-TAG-SHOW-SEASON-NUMBER:CAPS" role="macro">
<title>GST_TAG_SHOW_SEASON_NUMBER</title>
<indexterm zone="GST-TAG-SHOW-SEASON-NUMBER:CAPS"><primary>GST_TAG_SHOW_SEASON_NUMBER</primary></indexterm>
<programlisting language="C">#define GST_TAG_SHOW_SEASON_NUMBER                "show-season-number"
</programlisting>
<para>Number of the season of a show/series (unsigned integer)</para>
</refsect2>
<refsect2 id="GST-TAG-LYRICS:CAPS" role="macro">
<title>GST_TAG_LYRICS</title>
<indexterm zone="GST-TAG-LYRICS:CAPS"><primary>GST_TAG_LYRICS</primary></indexterm>
<programlisting language="C">#define GST_TAG_LYRICS                            "lyrics"
</programlisting>
<para>The lyrics of the media (string)</para>
</refsect2>
<refsect2 id="GST-TAG-COMPOSER-SORTNAME:CAPS" role="macro">
<title>GST_TAG_COMPOSER_SORTNAME</title>
<indexterm zone="GST-TAG-COMPOSER-SORTNAME:CAPS"><primary>GST_TAG_COMPOSER_SORTNAME</primary></indexterm>
<programlisting language="C">#define GST_TAG_COMPOSER_SORTNAME                 "composer-sortname"
</programlisting>
<para>The composer's name, used for sorting (string)</para>
</refsect2>
<refsect2 id="GST-TAG-GROUPING:CAPS" role="macro">
<title>GST_TAG_GROUPING</title>
<indexterm zone="GST-TAG-GROUPING:CAPS"><primary>GST_TAG_GROUPING</primary></indexterm>
<programlisting language="C">#define GST_TAG_GROUPING                          "grouping"
</programlisting>
<para>Groups together media that are related and spans multiple tracks. An
example are multiple pieces of a concerto. (string)</para>
</refsect2>
<refsect2 id="GST-TAG-USER-RATING:CAPS" role="macro">
<title>GST_TAG_USER_RATING</title>
<indexterm zone="GST-TAG-USER-RATING:CAPS"><primary>GST_TAG_USER_RATING</primary></indexterm>
<programlisting language="C">#define GST_TAG_USER_RATING                       "user-rating"
</programlisting>
<para>Rating attributed by a person (likely the application user).
The higher the value, the more the user likes this media
(unsigned int from 0 to 100)</para>
</refsect2>
<refsect2 id="GST-TAG-DEVICE-MANUFACTURER:CAPS" role="macro">
<title>GST_TAG_DEVICE_MANUFACTURER</title>
<indexterm zone="GST-TAG-DEVICE-MANUFACTURER:CAPS"><primary>GST_TAG_DEVICE_MANUFACTURER</primary></indexterm>
<programlisting language="C">#define GST_TAG_DEVICE_MANUFACTURER               "device-manufacturer"
</programlisting>
<para>Manufacturer of the device used to create the media (string)</para>
</refsect2>
<refsect2 id="GST-TAG-DEVICE-MODEL:CAPS" role="macro">
<title>GST_TAG_DEVICE_MODEL</title>
<indexterm zone="GST-TAG-DEVICE-MODEL:CAPS"><primary>GST_TAG_DEVICE_MODEL</primary></indexterm>
<programlisting language="C">#define GST_TAG_DEVICE_MODEL                      "device-model"
</programlisting>
<para>Model of the device used to create the media (string)</para>
</refsect2>
<refsect2 id="GST-TAG-APPLICATION-NAME:CAPS" role="macro">
<title>GST_TAG_APPLICATION_NAME</title>
<indexterm zone="GST-TAG-APPLICATION-NAME:CAPS"><primary>GST_TAG_APPLICATION_NAME</primary></indexterm>
<programlisting language="C">#define GST_TAG_APPLICATION_NAME                  "application-name"
</programlisting>
<para>Name of the application used to create the media (string)</para>
</refsect2>
<refsect2 id="GST-TAG-APPLICATION-DATA:CAPS" role="macro">
<title>GST_TAG_APPLICATION_DATA</title>
<indexterm zone="GST-TAG-APPLICATION-DATA:CAPS"><primary>GST_TAG_APPLICATION_DATA</primary></indexterm>
<programlisting language="C">#define GST_TAG_APPLICATION_DATA          "application-data"
</programlisting>
<para>Arbitrary application data (sample)</para>
<para>Some formats allow applications to add their own arbitrary data
into files. This data is application dependent.</para>
</refsect2>
<refsect2 id="GST-TAG-IMAGE-ORIENTATION:CAPS" role="macro">
<title>GST_TAG_IMAGE_ORIENTATION</title>
<indexterm zone="GST-TAG-IMAGE-ORIENTATION:CAPS"><primary>GST_TAG_IMAGE_ORIENTATION</primary></indexterm>
<programlisting language="C">#define GST_TAG_IMAGE_ORIENTATION            "image-orientation"
</programlisting>
<para>Represents the 'Orientation' tag from EXIF. Defines how the image
should be rotated and mirrored for display. (string)</para>
<para>This tag has a predefined set of allowed values:
  "rotate-0"
  "rotate-90"
  "rotate-180"
  "rotate-270"
  "flip-rotate-0"
  "flip-rotate-90"
  "flip-rotate-180"
  "flip-rotate-270"</para>
<para>The naming is adopted according to a possible transformation to perform
on the image to fix its orientation, obviously equivalent operations will
yield the same result.</para>
<para>Rotations indicated by the values are in clockwise direction and
'flip' means an horizontal mirroring.</para>
</refsect2>
<refsect2 id="GST-TAG-PUBLISHER:CAPS" role="macro" condition="since:1.2">
<title>GST_TAG_PUBLISHER</title>
<indexterm zone="GST-TAG-PUBLISHER:CAPS" role="1.2"><primary>GST_TAG_PUBLISHER</primary></indexterm>
<programlisting language="C">#define GST_TAG_PUBLISHER                         "publisher"
</programlisting>
<para>Name of the label or publisher (string)</para>
<para role="since">Since: <link linkend="api-index-1.2">1.2</link></para></refsect2>
<refsect2 id="GST-TAG-INTERPRETED-BY:CAPS" role="macro" condition="since:1.2">
<title>GST_TAG_INTERPRETED_BY</title>
<indexterm zone="GST-TAG-INTERPRETED-BY:CAPS" role="1.2"><primary>GST_TAG_INTERPRETED_BY</primary></indexterm>
<programlisting language="C">#define GST_TAG_INTERPRETED_BY                    "interpreted-by"
</programlisting>
<para>Information about the people behind a remix and similar
interpretations of another existing piece (string)</para>
<para role="since">Since: <link linkend="api-index-1.2">1.2</link></para></refsect2>
<refsect2 id="GST-TAG-MIDI-BASE-NOTE:CAPS" role="macro" condition="since:1.4">
<title>GST_TAG_MIDI_BASE_NOTE</title>
<indexterm zone="GST-TAG-MIDI-BASE-NOTE:CAPS" role="1.4"><primary>GST_TAG_MIDI_BASE_NOTE</primary></indexterm>
<programlisting language="C">#define GST_TAG_MIDI_BASE_NOTE                    "midi-base-note"
</programlisting>
<ulink url="http://en.wikipedia.org/wiki/Note#Note_designation_in_accordance_with_octave_name">Midi note number</ulink>
<para>of the audio track. This is useful for sample instruments and in particular
for multi-samples.</para>
<para role="since">Since: <link linkend="api-index-1.4">1.4</link></para></refsect2>

</refsect1>

</refentry>
