<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % version-entities SYSTEM "version.entities">
%version-entities;
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY hash "#">
]>
<refentry id="GstAllocator">
<refmeta>
<refentrytitle role="top_of_page" id="GstAllocator.top_of_page">GstAllocator</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GSTREAMER Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>GstAllocator</refname>
<refpurpose>allocate memory blocks</refpurpose>
</refnamediv>

<refsect1 id="GstAllocator.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="GstAllocator"><returnvalue>GstAllocator</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-allocator-find">gst_allocator_find</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-allocator-register">gst_allocator_register</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-allocator-set-default">gst_allocator_set_default</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-allocation-params-init">gst_allocation_params_init</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GstAllocationParams"><returnvalue>GstAllocationParams</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-allocation-params-copy">gst_allocation_params_copy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-allocation-params-free">gst_allocation_params_free</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GstMemory"><returnvalue>GstMemory</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-allocator-alloc">gst_allocator_alloc</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="gst-allocator-free">gst_allocator_free</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GstMemory"><returnvalue>GstMemory</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="gst-memory-new-wrapped">gst_memory_new_wrapped</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<anchor id="GstAllocationParams"/><refsect1 id="GstAllocator.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="variable_type">extern</entry><entry role="function_name"><link linkend="gst-memory-alignment">gst_memory_alignment</link></entry></row>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="GstAllocator-struct">GstAllocator</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GstAllocatorClass">GstAllocatorClass</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="GstAllocatorFlags">GstAllocatorFlags</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="GstAllocationParams-struct">GstAllocationParams</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="GST-ALLOCATOR-SYSMEM:CAPS">GST_ALLOCATOR_SYSMEM</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="GstAllocator.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GBoxed">GBoxed</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GstAllocationParams
    <link linkend="GObject">GObject</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="GInitiallyUnowned">GInitiallyUnowned</link>
        <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="GstObject">GstObject</link>
            <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> GstAllocator
</screen>
</refsect1>

<refsect1 id="GstAllocator.includes"><title>Includes</title><synopsis>#include &lt;gst/gst.h&gt;
</synopsis></refsect1>

<refsect1 id="GstAllocator.description" role="desc">
<title role="desc.title">Description</title>
<para>Memory is usually created by allocators with a <link linkend="gst-allocator-alloc"><function>gst_allocator_alloc()</function></link>
method call. When <link linkend="NULL:CAPS"><literal>NULL</literal></link> is used as the allocator, the default allocator will
be used.</para>
<para>New allocators can be registered with <link linkend="gst-allocator-register"><function>gst_allocator_register()</function></link>.
Allocators are identified by name and can be retrieved with
<link linkend="gst-allocator-find"><function>gst_allocator_find()</function></link>. <link linkend="gst-allocator-set-default"><function>gst_allocator_set_default()</function></link> can be used to change the
default allocator.</para>
<para>New memory can be created with <link linkend="gst-memory-new-wrapped"><function>gst_memory_new_wrapped()</function></link> that wraps the memory
allocated elsewhere.</para>

</refsect1>
<refsect1 id="GstAllocator.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="gst-allocator-find" role="function">
<title>gst_allocator_find&#160;()</title>
<indexterm zone="gst-allocator-find"><primary>gst_allocator_find</primary></indexterm>
<programlisting language="C"><link linkend="GstAllocator"><returnvalue>GstAllocator</returnvalue></link>&#160;*
gst_allocator_find (<parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>);</programlisting>
<para>Find a previously registered allocator with <parameter>name</parameter>
. When <parameter>name</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, the
default allocator will be returned.</para>
<refsect3 id="gst-allocator-find.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para> the name of the allocator. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>allow-none</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-allocator-find.returns" role="returns">
<title>Returns</title>
<para> a <link linkend="GstAllocator"><type>GstAllocator</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> when
the allocator with <parameter>name</parameter>
was not registered. Use <link linkend="gst-object-unref"><function>gst_object_unref()</function></link>
to release the allocator after usage. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>][<acronym>nullable</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="gst-allocator-register" role="function">
<title>gst_allocator_register&#160;()</title>
<indexterm zone="gst-allocator-register"><primary>gst_allocator_register</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_allocator_register (<parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                        <parameter><link linkend="GstAllocator"><type>GstAllocator</type></link> *allocator</parameter>);</programlisting>
<para>Registers the memory <parameter>allocator</parameter>
 with <parameter>name</parameter>
. This function takes ownership of
<parameter>allocator</parameter>
.</para>
<refsect3 id="gst-allocator-register.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the name of the allocator</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>allocator</para></entry>
<entry role="parameter_description"><para> <link linkend="GstAllocator"><type>GstAllocator</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-allocator-set-default" role="function">
<title>gst_allocator_set_default&#160;()</title>
<indexterm zone="gst-allocator-set-default"><primary>gst_allocator_set_default</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_allocator_set_default (<parameter><link linkend="GstAllocator"><type>GstAllocator</type></link> *allocator</parameter>);</programlisting>
<para>Set the default allocator. This function takes ownership of <parameter>allocator</parameter>
.</para>
<refsect3 id="gst-allocator-set-default.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>allocator</para></entry>
<entry role="parameter_description"><para> a <link linkend="GstAllocator"><type>GstAllocator</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-allocation-params-init" role="function">
<title>gst_allocation_params_init&#160;()</title>
<indexterm zone="gst-allocation-params-init"><primary>gst_allocation_params_init</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_allocation_params_init (<parameter><link linkend="GstAllocationParams"><type>GstAllocationParams</type></link> *params</parameter>);</programlisting>
<para>Initialize <parameter>params</parameter>
 to its default values</para>
<refsect3 id="gst-allocation-params-init.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>params</para></entry>
<entry role="parameter_description"><para>a <link linkend="GstAllocationParams"><type>GstAllocationParams</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-allocation-params-copy" role="function">
<title>gst_allocation_params_copy&#160;()</title>
<indexterm zone="gst-allocation-params-copy"><primary>gst_allocation_params_copy</primary></indexterm>
<programlisting language="C"><link linkend="GstAllocationParams"><returnvalue>GstAllocationParams</returnvalue></link>&#160;*
gst_allocation_params_copy (<parameter>const <link linkend="GstAllocationParams"><type>GstAllocationParams</type></link> *params</parameter>);</programlisting>
<para>Create a copy of <parameter>params</parameter>
.</para>
<para>Free-function: gst_allocation_params_free</para>
<refsect3 id="gst-allocation-params-copy.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>params</para></entry>
<entry role="parameter_description"><para> a <link linkend="GstAllocationParams"><type>GstAllocationParams</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>transfer none</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-allocation-params-copy.returns" role="returns">
<title>Returns</title>
<para> a new #<link linkend="GstAllocationParams"><type>GstAllocationParams</type></link>, free with
<link linkend="gst-allocation-params-free"><function>gst_allocation_params_free()</function></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="gst-allocation-params-free" role="function">
<title>gst_allocation_params_free&#160;()</title>
<indexterm zone="gst-allocation-params-free"><primary>gst_allocation_params_free</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_allocation_params_free (<parameter><link linkend="GstAllocationParams"><type>GstAllocationParams</type></link> *params</parameter>);</programlisting>
<para>Free <parameter>params</parameter>
</para>
<refsect3 id="gst-allocation-params-free.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>params</para></entry>
<entry role="parameter_description"><para> a <link linkend="GstAllocationParams"><type>GstAllocationParams</type></link>. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>in</acronym>][<acronym>transfer full</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-allocator-alloc" role="function">
<title>gst_allocator_alloc&#160;()</title>
<indexterm zone="gst-allocator-alloc"><primary>gst_allocator_alloc</primary></indexterm>
<programlisting language="C"><link linkend="GstMemory"><returnvalue>GstMemory</returnvalue></link>&#160;*
gst_allocator_alloc (<parameter><link linkend="GstAllocator"><type>GstAllocator</type></link> *allocator</parameter>,
                     <parameter><link linkend="gsize"><type>gsize</type></link> size</parameter>,
                     <parameter><link linkend="GstAllocationParams"><type>GstAllocationParams</type></link> *params</parameter>);</programlisting>
<para>Use <parameter>allocator</parameter>
 to allocate a new memory block with memory that is at least
<parameter>size</parameter>
 big.</para>
<para>The optional <parameter>params</parameter>
 can specify the prefix and padding for the memory. If
<link linkend="NULL:CAPS"><literal>NULL</literal></link> is passed, no flags, no extra prefix/padding and a default alignment is
used.</para>
<para>The prefix/padding will be filled with 0 if flags contains
<link linkend="GST-MEMORY-FLAG-ZERO-PREFIXED:CAPS"><type>GST_MEMORY_FLAG_ZERO_PREFIXED</type></link> and <link linkend="GST-MEMORY-FLAG-ZERO-PADDED:CAPS"><type>GST_MEMORY_FLAG_ZERO_PADDED</type></link> respectively.</para>
<para>When <parameter>allocator</parameter>
 is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, the default allocator will be used.</para>
<para>The alignment in <parameter>params</parameter>
 is given as a bitmask so that <parameter>align</parameter>
 + 1 equals
the amount of bytes to align to. For example, to align to 8 bytes,
use an alignment of 7.</para>
<refsect3 id="gst-allocator-alloc.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>allocator</para></entry>
<entry role="parameter_description"><para> a <link linkend="GstAllocator"><type>GstAllocator</type></link> to use. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>transfer none</acronym>][<acronym>allow-none</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>size</para></entry>
<entry role="parameter_description"><para>size of the visible memory area</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>params</para></entry>
<entry role="parameter_description"><para> optional parameters. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>transfer none</acronym>][<acronym>allow-none</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-allocator-alloc.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GstMemory"><type>GstMemory</type></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="gst-allocator-free" role="function">
<title>gst_allocator_free&#160;()</title>
<indexterm zone="gst-allocator-free"><primary>gst_allocator_free</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
gst_allocator_free (<parameter><link linkend="GstAllocator"><type>GstAllocator</type></link> *allocator</parameter>,
                    <parameter><link linkend="GstMemory"><type>GstMemory</type></link> *memory</parameter>);</programlisting>
<para>Free <parameter>memory</parameter>
 that was previously allocated with <link linkend="gst-allocator-alloc"><function>gst_allocator_alloc()</function></link>.</para>
<refsect3 id="gst-allocator-free.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>allocator</para></entry>
<entry role="parameter_description"><para> a <link linkend="GstAllocator"><type>GstAllocator</type></link> to use. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>transfer none</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>memory</para></entry>
<entry role="parameter_description"><para> the memory to free. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="gst-memory-new-wrapped" role="function">
<title>gst_memory_new_wrapped&#160;()</title>
<indexterm zone="gst-memory-new-wrapped"><primary>gst_memory_new_wrapped</primary></indexterm>
<programlisting language="C"><link linkend="GstMemory"><returnvalue>GstMemory</returnvalue></link>&#160;*
gst_memory_new_wrapped (<parameter><link linkend="GstMemoryFlags"><type>GstMemoryFlags</type></link> flags</parameter>,
                        <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>,
                        <parameter><link linkend="gsize"><type>gsize</type></link> maxsize</parameter>,
                        <parameter><link linkend="gsize"><type>gsize</type></link> offset</parameter>,
                        <parameter><link linkend="gsize"><type>gsize</type></link> size</parameter>,
                        <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>,
                        <parameter><link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> notify</parameter>);</programlisting>
<para>Allocate a new memory block that wraps the given <parameter>data</parameter>
.</para>
<para>The prefix/padding must be filled with 0 if <parameter>flags</parameter>
 contains
<link linkend="GST-MEMORY-FLAG-ZERO-PREFIXED:CAPS"><type>GST_MEMORY_FLAG_ZERO_PREFIXED</type></link> and <link linkend="GST-MEMORY-FLAG-ZERO-PADDED:CAPS"><type>GST_MEMORY_FLAG_ZERO_PADDED</type></link> respectively.</para>
<refsect3 id="gst-memory-new-wrapped.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para><link linkend="GstMemoryFlags"><type>GstMemoryFlags</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para> data to
wrap. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>array</acronym> length=size][<acronym>element-type</acronym> guint8][<acronym>transfer none</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>maxsize</para></entry>
<entry role="parameter_description"><para>allocated size of <parameter>data</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>offset</para></entry>
<entry role="parameter_description"><para>offset in <parameter>data</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>size</para></entry>
<entry role="parameter_description"><para>size of valid data</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para> user_data. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>allow-none</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>notify</para></entry>
<entry role="parameter_description"><para> called with <parameter>user_data</parameter>
when the memory is freed. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>allow-none</acronym>][<acronym>scope async</acronym>][<acronym>closure</acronym> user_data]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="gst-memory-new-wrapped.returns" role="returns">
<title>Returns</title>
<para> a new <link linkend="GstMemory"><type>GstMemory</type></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer full</acronym>]</emphasis></para>
</refsect3></refsect2>

</refsect1>
<refsect1 id="GstAllocator.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="gst-memory-alignment" role="variable">
<title>gst_memory_alignment</title>
<indexterm zone="gst-memory-alignment"><primary>gst_memory_alignment</primary></indexterm>
<programlisting language="C">GST_EXPORT gsize gst_memory_alignment;
</programlisting>
<para>The default memory alignment in bytes - 1
an alignment of 7 would be the same as what <link linkend="malloc"><function>malloc()</function></link> guarantees.</para>
</refsect2>
<refsect2 id="GstAllocator-struct" role="struct">
<title>GstAllocator</title>
<indexterm zone="GstAllocator-struct"><primary>GstAllocator</primary></indexterm>
<programlisting language="C">typedef struct {
  GstMemoryMapFunction       mem_map;
  GstMemoryUnmapFunction     mem_unmap;

  GstMemoryCopyFunction      mem_copy;
  GstMemoryShareFunction     mem_share;
  GstMemoryIsSpanFunction    mem_is_span;

  GstMemoryMapFullFunction   mem_map_full;
  GstMemoryUnmapFullFunction mem_unmap_full;
} GstAllocator;
</programlisting>
<para>The <link linkend="GstAllocator"><type>GstAllocator</type></link> is used to create new memory.</para>
<refsect3 id="GstAllocator.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><link linkend="GstMemoryMapFunction"><type>GstMemoryMapFunction</type></link>&#160;<structfield id="GstAllocator-struct.mem-map">mem_map</structfield>;</para></entry>
<entry role="struct_member_description"><para>the implementation of the GstMemoryMapFunction</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="GstMemoryUnmapFunction"><type>GstMemoryUnmapFunction</type></link>&#160;<structfield id="GstAllocator-struct.mem-unmap">mem_unmap</structfield>;</para></entry>
<entry role="struct_member_description"><para>the implementation of the GstMemoryUnmapFunction</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="GstMemoryCopyFunction"><type>GstMemoryCopyFunction</type></link>&#160;<structfield id="GstAllocator-struct.mem-copy">mem_copy</structfield>;</para></entry>
<entry role="struct_member_description"><para>the implementation of the GstMemoryCopyFunction</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="GstMemoryShareFunction"><type>GstMemoryShareFunction</type></link>&#160;<structfield id="GstAllocator-struct.mem-share">mem_share</structfield>;</para></entry>
<entry role="struct_member_description"><para>the implementation of the GstMemoryShareFunction</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="GstMemoryIsSpanFunction"><type>GstMemoryIsSpanFunction</type></link>&#160;<structfield id="GstAllocator-struct.mem-is-span">mem_is_span</structfield>;</para></entry>
<entry role="struct_member_description"><para>the implementation of the GstMemoryIsSpanFunction</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="GstMemoryMapFullFunction"><type>GstMemoryMapFullFunction</type></link>&#160;<structfield id="GstAllocator-struct.mem-map-full">mem_map_full</structfield>;</para></entry>
<entry role="struct_member_description"><para>the implementation of the GstMemoryMapFullFunction.
Will be used instead of <parameter>mem_map</parameter>
if present. (Since 1.6)</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="GstMemoryUnmapFullFunction"><type>GstMemoryUnmapFullFunction</type></link>&#160;<structfield id="GstAllocator-struct.mem-unmap-full">mem_unmap_full</structfield>;</para></entry>
<entry role="struct_member_description"><para>the implementation of the GstMemoryUnmapFullFunction.
Will be used instead of <parameter>mem_unmap</parameter>
if present. (Since 1.6)</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="GstAllocatorClass" role="struct">
<title>struct GstAllocatorClass</title>
<indexterm zone="GstAllocatorClass"><primary>GstAllocatorClass</primary></indexterm>
<programlisting language="C">struct GstAllocatorClass {
  GstObjectClass object_class;

  GstMemory *  (*alloc)      (GstAllocator *allocator, gsize size,
                              GstAllocationParams *params);
  void         (*free)       (GstAllocator *allocator, GstMemory *memory);
};
</programlisting>
<para>The <link linkend="GstAllocator"><type>GstAllocator</type></link> is used to create new memory.</para>
<refsect3 id="GstAllocatorClass.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><link linkend="GstObjectClass"><type>GstObjectClass</type></link>&#160;<structfield id="GstAllocatorClass.object-class">object_class</structfield>;</para></entry>
<entry role="struct_member_description"><para>Object parent class</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GstAllocatorClass.alloc">alloc</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>implementation that acquires memory</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><structfield id="GstAllocatorClass.free">free</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>implementation that releases memory</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="GstAllocatorFlags" role="enum">
<title>enum GstAllocatorFlags</title>
<indexterm zone="GstAllocatorFlags"><primary>GstAllocatorFlags</primary></indexterm>
<para>Flags for allocators.</para>
<refsect3 id="GstAllocatorFlags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="GST-ALLOCATOR-FLAG-CUSTOM-ALLOC:CAPS">GST_ALLOCATOR_FLAG_CUSTOM_ALLOC</para></entry>
<entry role="enum_member_description"><para>The allocator has a custom alloc function.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="GST-ALLOCATOR-FLAG-LAST:CAPS">GST_ALLOCATOR_FLAG_LAST</para></entry>
<entry role="enum_member_description"><para>first flag that can be used for custom purposes</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="GstAllocationParams-struct" role="struct">
<title>struct GstAllocationParams</title>
<indexterm zone="GstAllocationParams-struct"><primary>GstAllocationParams</primary></indexterm>
<programlisting language="C">struct GstAllocationParams {
  GstMemoryFlags flags;
  gsize          align;
  gsize          prefix;
  gsize          padding;
};
</programlisting>
<para>Parameters to control the allocation of memory</para>
<refsect3 id="GstAllocationParams.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><link linkend="GstMemoryFlags"><type>GstMemoryFlags</type></link>&#160;<structfield id="GstAllocationParams-struct.flags">flags</structfield>;</para></entry>
<entry role="struct_member_description"><para>flags to control allocation</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="gsize"><type>gsize</type></link>&#160;<structfield id="GstAllocationParams-struct.align">align</structfield>;</para></entry>
<entry role="struct_member_description"><para>the desired alignment of the memory</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="gsize"><type>gsize</type></link>&#160;<structfield id="GstAllocationParams-struct.prefix">prefix</structfield>;</para></entry>
<entry role="struct_member_description"><para>the desired prefix</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row role="member"><entry role="struct_member_name"><para><link linkend="gsize"><type>gsize</type></link>&#160;<structfield id="GstAllocationParams-struct.padding">padding</structfield>;</para></entry>
<entry role="struct_member_description"><para>the desired padding</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="GST-ALLOCATOR-SYSMEM:CAPS" role="macro">
<title>GST_ALLOCATOR_SYSMEM</title>
<indexterm zone="GST-ALLOCATOR-SYSMEM:CAPS"><primary>GST_ALLOCATOR_SYSMEM</primary></indexterm>
<programlisting language="C">#define GST_ALLOCATOR_SYSMEM   "SystemMemory"
</programlisting>
<para>The allocator name for the default system memory allocator</para>
</refsect2>

</refsect1>
<refsect1 id="GstAllocator.see-also">
<title>See Also</title>
<para><link linkend="GstMemory"><type>GstMemory</type></link></para>

</refsect1>

</refentry>
